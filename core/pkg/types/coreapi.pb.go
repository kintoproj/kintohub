// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coreapi.proto

package types

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EnvironmentQueryRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnvironmentQueryRequest) Reset()         { *m = EnvironmentQueryRequest{} }
func (m *EnvironmentQueryRequest) String() string { return proto.CompactTextString(m) }
func (*EnvironmentQueryRequest) ProtoMessage()    {}
func (*EnvironmentQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{0}
}

func (m *EnvironmentQueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnvironmentQueryRequest.Unmarshal(m, b)
}
func (m *EnvironmentQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnvironmentQueryRequest.Marshal(b, m, deterministic)
}
func (m *EnvironmentQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvironmentQueryRequest.Merge(m, src)
}
func (m *EnvironmentQueryRequest) XXX_Size() int {
	return xxx_messageInfo_EnvironmentQueryRequest.Size(m)
}
func (m *EnvironmentQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvironmentQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnvironmentQueryRequest proto.InternalMessageInfo

func (m *EnvironmentQueryRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CreateEnvironmentRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateEnvironmentRequest) Reset()         { *m = CreateEnvironmentRequest{} }
func (m *CreateEnvironmentRequest) String() string { return proto.CompactTextString(m) }
func (*CreateEnvironmentRequest) ProtoMessage()    {}
func (*CreateEnvironmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{1}
}

func (m *CreateEnvironmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateEnvironmentRequest.Unmarshal(m, b)
}
func (m *CreateEnvironmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateEnvironmentRequest.Marshal(b, m, deterministic)
}
func (m *CreateEnvironmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateEnvironmentRequest.Merge(m, src)
}
func (m *CreateEnvironmentRequest) XXX_Size() int {
	return xxx_messageInfo_CreateEnvironmentRequest.Size(m)
}
func (m *CreateEnvironmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateEnvironmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateEnvironmentRequest proto.InternalMessageInfo

func (m *CreateEnvironmentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateEnvironmentRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateEnvironmentRequest) Reset()         { *m = UpdateEnvironmentRequest{} }
func (m *UpdateEnvironmentRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateEnvironmentRequest) ProtoMessage()    {}
func (*UpdateEnvironmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{2}
}

func (m *UpdateEnvironmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateEnvironmentRequest.Unmarshal(m, b)
}
func (m *UpdateEnvironmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateEnvironmentRequest.Marshal(b, m, deterministic)
}
func (m *UpdateEnvironmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEnvironmentRequest.Merge(m, src)
}
func (m *UpdateEnvironmentRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateEnvironmentRequest.Size(m)
}
func (m *UpdateEnvironmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEnvironmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEnvironmentRequest proto.InternalMessageInfo

func (m *UpdateEnvironmentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateEnvironmentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteEnvironmentRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteEnvironmentRequest) Reset()         { *m = DeleteEnvironmentRequest{} }
func (m *DeleteEnvironmentRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteEnvironmentRequest) ProtoMessage()    {}
func (*DeleteEnvironmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{3}
}

func (m *DeleteEnvironmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteEnvironmentRequest.Unmarshal(m, b)
}
func (m *DeleteEnvironmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteEnvironmentRequest.Marshal(b, m, deterministic)
}
func (m *DeleteEnvironmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteEnvironmentRequest.Merge(m, src)
}
func (m *DeleteEnvironmentRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteEnvironmentRequest.Size(m)
}
func (m *DeleteEnvironmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteEnvironmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteEnvironmentRequest proto.InternalMessageInfo

func (m *DeleteEnvironmentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CreateBlockRequest struct {
	EnvId                string       `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	Name                 string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RunConfig            *RunConfig   `protobuf:"bytes,3,opt,name=runConfig,proto3" json:"runConfig,omitempty"`
	BuildConfig          *BuildConfig `protobuf:"bytes,4,opt,name=buildConfig,proto3" json:"buildConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreateBlockRequest) Reset()         { *m = CreateBlockRequest{} }
func (m *CreateBlockRequest) String() string { return proto.CompactTextString(m) }
func (*CreateBlockRequest) ProtoMessage()    {}
func (*CreateBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{4}
}

func (m *CreateBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateBlockRequest.Unmarshal(m, b)
}
func (m *CreateBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateBlockRequest.Marshal(b, m, deterministic)
}
func (m *CreateBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBlockRequest.Merge(m, src)
}
func (m *CreateBlockRequest) XXX_Size() int {
	return xxx_messageInfo_CreateBlockRequest.Size(m)
}
func (m *CreateBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBlockRequest proto.InternalMessageInfo

func (m *CreateBlockRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *CreateBlockRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateBlockRequest) GetRunConfig() *RunConfig {
	if m != nil {
		return m.RunConfig
	}
	return nil
}

func (m *CreateBlockRequest) GetBuildConfig() *BuildConfig {
	if m != nil {
		return m.BuildConfig
	}
	return nil
}

type DeployBlockRequest struct {
	EnvId                string       `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	Name                 string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RunConfig            *RunConfig   `protobuf:"bytes,3,opt,name=runConfig,proto3" json:"runConfig,omitempty"`
	BuildConfig          *BuildConfig `protobuf:"bytes,4,opt,name=buildConfig,proto3" json:"buildConfig,omitempty"`
	BaseReleaseId        string       `protobuf:"bytes,5,opt,name=baseReleaseId,proto3" json:"baseReleaseId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DeployBlockRequest) Reset()         { *m = DeployBlockRequest{} }
func (m *DeployBlockRequest) String() string { return proto.CompactTextString(m) }
func (*DeployBlockRequest) ProtoMessage()    {}
func (*DeployBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{5}
}

func (m *DeployBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployBlockRequest.Unmarshal(m, b)
}
func (m *DeployBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployBlockRequest.Marshal(b, m, deterministic)
}
func (m *DeployBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployBlockRequest.Merge(m, src)
}
func (m *DeployBlockRequest) XXX_Size() int {
	return xxx_messageInfo_DeployBlockRequest.Size(m)
}
func (m *DeployBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeployBlockRequest proto.InternalMessageInfo

func (m *DeployBlockRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *DeployBlockRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeployBlockRequest) GetRunConfig() *RunConfig {
	if m != nil {
		return m.RunConfig
	}
	return nil
}

func (m *DeployBlockRequest) GetBuildConfig() *BuildConfig {
	if m != nil {
		return m.BuildConfig
	}
	return nil
}

func (m *DeployBlockRequest) GetBaseReleaseId() string {
	if m != nil {
		return m.BaseReleaseId
	}
	return ""
}

type TriggerDeployRequest struct {
	EnvId                string   `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TriggerDeployRequest) Reset()         { *m = TriggerDeployRequest{} }
func (m *TriggerDeployRequest) String() string { return proto.CompactTextString(m) }
func (*TriggerDeployRequest) ProtoMessage()    {}
func (*TriggerDeployRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{6}
}

func (m *TriggerDeployRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TriggerDeployRequest.Unmarshal(m, b)
}
func (m *TriggerDeployRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TriggerDeployRequest.Marshal(b, m, deterministic)
}
func (m *TriggerDeployRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerDeployRequest.Merge(m, src)
}
func (m *TriggerDeployRequest) XXX_Size() int {
	return xxx_messageInfo_TriggerDeployRequest.Size(m)
}
func (m *TriggerDeployRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerDeployRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerDeployRequest proto.InternalMessageInfo

func (m *TriggerDeployRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *TriggerDeployRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SuspendBlockRequest struct {
	EnvId                string   `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SuspendBlockRequest) Reset()         { *m = SuspendBlockRequest{} }
func (m *SuspendBlockRequest) String() string { return proto.CompactTextString(m) }
func (*SuspendBlockRequest) ProtoMessage()    {}
func (*SuspendBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{7}
}

func (m *SuspendBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SuspendBlockRequest.Unmarshal(m, b)
}
func (m *SuspendBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SuspendBlockRequest.Marshal(b, m, deterministic)
}
func (m *SuspendBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuspendBlockRequest.Merge(m, src)
}
func (m *SuspendBlockRequest) XXX_Size() int {
	return xxx_messageInfo_SuspendBlockRequest.Size(m)
}
func (m *SuspendBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SuspendBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SuspendBlockRequest proto.InternalMessageInfo

func (m *SuspendBlockRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *SuspendBlockRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BlockQueryRequest struct {
	EnvId                string   `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockQueryRequest) Reset()         { *m = BlockQueryRequest{} }
func (m *BlockQueryRequest) String() string { return proto.CompactTextString(m) }
func (*BlockQueryRequest) ProtoMessage()    {}
func (*BlockQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{8}
}

func (m *BlockQueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockQueryRequest.Unmarshal(m, b)
}
func (m *BlockQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockQueryRequest.Marshal(b, m, deterministic)
}
func (m *BlockQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockQueryRequest.Merge(m, src)
}
func (m *BlockQueryRequest) XXX_Size() int {
	return xxx_messageInfo_BlockQueryRequest.Size(m)
}
func (m *BlockQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockQueryRequest proto.InternalMessageInfo

func (m *BlockQueryRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *BlockQueryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteBlockRequest struct {
	EnvId                string   `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBlockRequest) Reset()         { *m = DeleteBlockRequest{} }
func (m *DeleteBlockRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteBlockRequest) ProtoMessage()    {}
func (*DeleteBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{9}
}

func (m *DeleteBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteBlockRequest.Unmarshal(m, b)
}
func (m *DeleteBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteBlockRequest.Marshal(b, m, deterministic)
}
func (m *DeleteBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBlockRequest.Merge(m, src)
}
func (m *DeleteBlockRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteBlockRequest.Size(m)
}
func (m *DeleteBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBlockRequest proto.InternalMessageInfo

func (m *DeleteBlockRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *DeleteBlockRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BlockUpdateResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReleaseId            string   `protobuf:"bytes,2,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockUpdateResponse) Reset()         { *m = BlockUpdateResponse{} }
func (m *BlockUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*BlockUpdateResponse) ProtoMessage()    {}
func (*BlockUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{10}
}

func (m *BlockUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockUpdateResponse.Unmarshal(m, b)
}
func (m *BlockUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockUpdateResponse.Marshal(b, m, deterministic)
}
func (m *BlockUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockUpdateResponse.Merge(m, src)
}
func (m *BlockUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_BlockUpdateResponse.Size(m)
}
func (m *BlockUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockUpdateResponse proto.InternalMessageInfo

func (m *BlockUpdateResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BlockUpdateResponse) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type WatchBuildLogsRequest struct {
	ReleaseId            string   `protobuf:"bytes,1,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	BlockName            string   `protobuf:"bytes,2,opt,name=blockName,proto3" json:"blockName,omitempty"`
	EnvId                string   `protobuf:"bytes,3,opt,name=envId,proto3" json:"envId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchBuildLogsRequest) Reset()         { *m = WatchBuildLogsRequest{} }
func (m *WatchBuildLogsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchBuildLogsRequest) ProtoMessage()    {}
func (*WatchBuildLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{11}
}

func (m *WatchBuildLogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchBuildLogsRequest.Unmarshal(m, b)
}
func (m *WatchBuildLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchBuildLogsRequest.Marshal(b, m, deterministic)
}
func (m *WatchBuildLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchBuildLogsRequest.Merge(m, src)
}
func (m *WatchBuildLogsRequest) XXX_Size() int {
	return xxx_messageInfo_WatchBuildLogsRequest.Size(m)
}
func (m *WatchBuildLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchBuildLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchBuildLogsRequest proto.InternalMessageInfo

func (m *WatchBuildLogsRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *WatchBuildLogsRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *WatchBuildLogsRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

type WatchConsoleLogsRequest struct {
	BlockName            string   `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	EnvId                string   `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchConsoleLogsRequest) Reset()         { *m = WatchConsoleLogsRequest{} }
func (m *WatchConsoleLogsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchConsoleLogsRequest) ProtoMessage()    {}
func (*WatchConsoleLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{12}
}

func (m *WatchConsoleLogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchConsoleLogsRequest.Unmarshal(m, b)
}
func (m *WatchConsoleLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchConsoleLogsRequest.Marshal(b, m, deterministic)
}
func (m *WatchConsoleLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchConsoleLogsRequest.Merge(m, src)
}
func (m *WatchConsoleLogsRequest) XXX_Size() int {
	return xxx_messageInfo_WatchConsoleLogsRequest.Size(m)
}
func (m *WatchConsoleLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchConsoleLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchConsoleLogsRequest proto.InternalMessageInfo

func (m *WatchConsoleLogsRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *WatchConsoleLogsRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

type UpdateBuildStatusRequest struct {
	BlockName            string       `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	EnvId                string       `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	ReleaseId            string       `protobuf:"bytes,3,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	Status               *BuildStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateBuildStatusRequest) Reset()         { *m = UpdateBuildStatusRequest{} }
func (m *UpdateBuildStatusRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBuildStatusRequest) ProtoMessage()    {}
func (*UpdateBuildStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{13}
}

func (m *UpdateBuildStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateBuildStatusRequest.Unmarshal(m, b)
}
func (m *UpdateBuildStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateBuildStatusRequest.Marshal(b, m, deterministic)
}
func (m *UpdateBuildStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBuildStatusRequest.Merge(m, src)
}
func (m *UpdateBuildStatusRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateBuildStatusRequest.Size(m)
}
func (m *UpdateBuildStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBuildStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBuildStatusRequest proto.InternalMessageInfo

func (m *UpdateBuildStatusRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *UpdateBuildStatusRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *UpdateBuildStatusRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *UpdateBuildStatusRequest) GetStatus() *BuildStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type UpdateBuildStepRequest struct {
	Name                 string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status               *BuildStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateBuildStepRequest) Reset()         { *m = UpdateBuildStepRequest{} }
func (m *UpdateBuildStepRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBuildStepRequest) ProtoMessage()    {}
func (*UpdateBuildStepRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{14}
}

func (m *UpdateBuildStepRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateBuildStepRequest.Unmarshal(m, b)
}
func (m *UpdateBuildStepRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateBuildStepRequest.Marshal(b, m, deterministic)
}
func (m *UpdateBuildStepRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBuildStepRequest.Merge(m, src)
}
func (m *UpdateBuildStepRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateBuildStepRequest.Size(m)
}
func (m *UpdateBuildStepRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBuildStepRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBuildStepRequest proto.InternalMessageInfo

func (m *UpdateBuildStepRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateBuildStepRequest) GetStatus() *BuildStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type UpdateBuildStatusResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBuildStatusResponse) Reset()         { *m = UpdateBuildStatusResponse{} }
func (m *UpdateBuildStatusResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateBuildStatusResponse) ProtoMessage()    {}
func (*UpdateBuildStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{15}
}

func (m *UpdateBuildStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateBuildStatusResponse.Unmarshal(m, b)
}
func (m *UpdateBuildStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateBuildStatusResponse.Marshal(b, m, deterministic)
}
func (m *UpdateBuildStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBuildStatusResponse.Merge(m, src)
}
func (m *UpdateBuildStatusResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateBuildStatusResponse.Size(m)
}
func (m *UpdateBuildStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBuildStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBuildStatusResponse proto.InternalMessageInfo

func (m *UpdateBuildStatusResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdateBuildCommitShaRequest struct {
	BlockName            string   `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	EnvId                string   `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	ReleaseId            string   `protobuf:"bytes,3,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	CommitSha            string   `protobuf:"bytes,4,opt,name=commitSha,proto3" json:"commitSha,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBuildCommitShaRequest) Reset()         { *m = UpdateBuildCommitShaRequest{} }
func (m *UpdateBuildCommitShaRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBuildCommitShaRequest) ProtoMessage()    {}
func (*UpdateBuildCommitShaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{16}
}

func (m *UpdateBuildCommitShaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateBuildCommitShaRequest.Unmarshal(m, b)
}
func (m *UpdateBuildCommitShaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateBuildCommitShaRequest.Marshal(b, m, deterministic)
}
func (m *UpdateBuildCommitShaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBuildCommitShaRequest.Merge(m, src)
}
func (m *UpdateBuildCommitShaRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateBuildCommitShaRequest.Size(m)
}
func (m *UpdateBuildCommitShaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBuildCommitShaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBuildCommitShaRequest proto.InternalMessageInfo

func (m *UpdateBuildCommitShaRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *UpdateBuildCommitShaRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *UpdateBuildCommitShaRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *UpdateBuildCommitShaRequest) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

type KillBlockInstanceRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnvId                string   `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KillBlockInstanceRequest) Reset()         { *m = KillBlockInstanceRequest{} }
func (m *KillBlockInstanceRequest) String() string { return proto.CompactTextString(m) }
func (*KillBlockInstanceRequest) ProtoMessage()    {}
func (*KillBlockInstanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{17}
}

func (m *KillBlockInstanceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KillBlockInstanceRequest.Unmarshal(m, b)
}
func (m *KillBlockInstanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KillBlockInstanceRequest.Marshal(b, m, deterministic)
}
func (m *KillBlockInstanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KillBlockInstanceRequest.Merge(m, src)
}
func (m *KillBlockInstanceRequest) XXX_Size() int {
	return xxx_messageInfo_KillBlockInstanceRequest.Size(m)
}
func (m *KillBlockInstanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KillBlockInstanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KillBlockInstanceRequest proto.InternalMessageInfo

func (m *KillBlockInstanceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *KillBlockInstanceRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

type RollbackBlockRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EnvId                string   `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	ReleaseId            string   `protobuf:"bytes,3,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RollbackBlockRequest) Reset()         { *m = RollbackBlockRequest{} }
func (m *RollbackBlockRequest) String() string { return proto.CompactTextString(m) }
func (*RollbackBlockRequest) ProtoMessage()    {}
func (*RollbackBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{18}
}

func (m *RollbackBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollbackBlockRequest.Unmarshal(m, b)
}
func (m *RollbackBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollbackBlockRequest.Marshal(b, m, deterministic)
}
func (m *RollbackBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackBlockRequest.Merge(m, src)
}
func (m *RollbackBlockRequest) XXX_Size() int {
	return xxx_messageInfo_RollbackBlockRequest.Size(m)
}
func (m *RollbackBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackBlockRequest proto.InternalMessageInfo

func (m *RollbackBlockRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RollbackBlockRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *RollbackBlockRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type CustomDomainNameRequest struct {
	EnvId                string             `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	BlockName            string             `protobuf:"bytes,2,opt,name=blockName,proto3" json:"blockName,omitempty"`
	CustomDomainName     string             `protobuf:"bytes,3,opt,name=customDomainName,proto3" json:"customDomainName,omitempty"`
	CNAME                string             `protobuf:"bytes,4,opt,name=CNAME,proto3" json:"CNAME,omitempty"`
	Protocol             RunConfig_Protocol `protobuf:"varint,5,opt,name=protocol,proto3,enum=RunConfig_Protocol" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CustomDomainNameRequest) Reset()         { *m = CustomDomainNameRequest{} }
func (m *CustomDomainNameRequest) String() string { return proto.CompactTextString(m) }
func (*CustomDomainNameRequest) ProtoMessage()    {}
func (*CustomDomainNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{19}
}

func (m *CustomDomainNameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomDomainNameRequest.Unmarshal(m, b)
}
func (m *CustomDomainNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomDomainNameRequest.Marshal(b, m, deterministic)
}
func (m *CustomDomainNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomDomainNameRequest.Merge(m, src)
}
func (m *CustomDomainNameRequest) XXX_Size() int {
	return xxx_messageInfo_CustomDomainNameRequest.Size(m)
}
func (m *CustomDomainNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomDomainNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CustomDomainNameRequest proto.InternalMessageInfo

func (m *CustomDomainNameRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *CustomDomainNameRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *CustomDomainNameRequest) GetCustomDomainName() string {
	if m != nil {
		return m.CustomDomainName
	}
	return ""
}

func (m *CustomDomainNameRequest) GetCNAME() string {
	if m != nil {
		return m.CNAME
	}
	return ""
}

func (m *CustomDomainNameRequest) GetProtocol() RunConfig_Protocol {
	if m != nil {
		return m.Protocol
	}
	return RunConfig_NOT_SET
}

type CheckCustomDomainNameResponse struct {
	IsCNAMEOK            bool     `protobuf:"varint,1,opt,name=isCNAMEOK,proto3" json:"isCNAMEOK,omitempty"`
	CNAMEWanted          string   `protobuf:"bytes,2,opt,name=CNAMEWanted,proto3" json:"CNAMEWanted,omitempty"`
	CNAMEFound           string   `protobuf:"bytes,3,opt,name=CNAMEFound,proto3" json:"CNAMEFound,omitempty"`
	IsCertificateReady   bool     `protobuf:"varint,4,opt,name=isCertificateReady,proto3" json:"isCertificateReady,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckCustomDomainNameResponse) Reset()         { *m = CheckCustomDomainNameResponse{} }
func (m *CheckCustomDomainNameResponse) String() string { return proto.CompactTextString(m) }
func (*CheckCustomDomainNameResponse) ProtoMessage()    {}
func (*CheckCustomDomainNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{20}
}

func (m *CheckCustomDomainNameResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckCustomDomainNameResponse.Unmarshal(m, b)
}
func (m *CheckCustomDomainNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckCustomDomainNameResponse.Marshal(b, m, deterministic)
}
func (m *CheckCustomDomainNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckCustomDomainNameResponse.Merge(m, src)
}
func (m *CheckCustomDomainNameResponse) XXX_Size() int {
	return xxx_messageInfo_CheckCustomDomainNameResponse.Size(m)
}
func (m *CheckCustomDomainNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckCustomDomainNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckCustomDomainNameResponse proto.InternalMessageInfo

func (m *CheckCustomDomainNameResponse) GetIsCNAMEOK() bool {
	if m != nil {
		return m.IsCNAMEOK
	}
	return false
}

func (m *CheckCustomDomainNameResponse) GetCNAMEWanted() string {
	if m != nil {
		return m.CNAMEWanted
	}
	return ""
}

func (m *CheckCustomDomainNameResponse) GetCNAMEFound() string {
	if m != nil {
		return m.CNAMEFound
	}
	return ""
}

func (m *CheckCustomDomainNameResponse) GetIsCertificateReady() bool {
	if m != nil {
		return m.IsCertificateReady
	}
	return false
}

type EnablePublicURLRequest struct {
	BlockName            string   `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	EnvId                string   `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	ReleaseId            string   `protobuf:"bytes,3,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnablePublicURLRequest) Reset()         { *m = EnablePublicURLRequest{} }
func (m *EnablePublicURLRequest) String() string { return proto.CompactTextString(m) }
func (*EnablePublicURLRequest) ProtoMessage()    {}
func (*EnablePublicURLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{21}
}

func (m *EnablePublicURLRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnablePublicURLRequest.Unmarshal(m, b)
}
func (m *EnablePublicURLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnablePublicURLRequest.Marshal(b, m, deterministic)
}
func (m *EnablePublicURLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnablePublicURLRequest.Merge(m, src)
}
func (m *EnablePublicURLRequest) XXX_Size() int {
	return xxx_messageInfo_EnablePublicURLRequest.Size(m)
}
func (m *EnablePublicURLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnablePublicURLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnablePublicURLRequest proto.InternalMessageInfo

func (m *EnablePublicURLRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *EnablePublicURLRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *EnablePublicURLRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type DisablePublicURLRequest struct {
	BlockName            string   `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	EnvId                string   `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisablePublicURLRequest) Reset()         { *m = DisablePublicURLRequest{} }
func (m *DisablePublicURLRequest) String() string { return proto.CompactTextString(m) }
func (*DisablePublicURLRequest) ProtoMessage()    {}
func (*DisablePublicURLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{22}
}

func (m *DisablePublicURLRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisablePublicURLRequest.Unmarshal(m, b)
}
func (m *DisablePublicURLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisablePublicURLRequest.Marshal(b, m, deterministic)
}
func (m *DisablePublicURLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisablePublicURLRequest.Merge(m, src)
}
func (m *DisablePublicURLRequest) XXX_Size() int {
	return xxx_messageInfo_DisablePublicURLRequest.Size(m)
}
func (m *DisablePublicURLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisablePublicURLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisablePublicURLRequest proto.InternalMessageInfo

func (m *DisablePublicURLRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *DisablePublicURLRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

type AbortBlockReleaseRequest struct {
	BlockName            string   `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	ReleaseId            string   `protobuf:"bytes,2,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	EnvId                string   `protobuf:"bytes,3,opt,name=envId,proto3" json:"envId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbortBlockReleaseRequest) Reset()         { *m = AbortBlockReleaseRequest{} }
func (m *AbortBlockReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*AbortBlockReleaseRequest) ProtoMessage()    {}
func (*AbortBlockReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{23}
}

func (m *AbortBlockReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbortBlockReleaseRequest.Unmarshal(m, b)
}
func (m *AbortBlockReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbortBlockReleaseRequest.Marshal(b, m, deterministic)
}
func (m *AbortBlockReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbortBlockReleaseRequest.Merge(m, src)
}
func (m *AbortBlockReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_AbortBlockReleaseRequest.Size(m)
}
func (m *AbortBlockReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AbortBlockReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AbortBlockReleaseRequest proto.InternalMessageInfo

func (m *AbortBlockReleaseRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *AbortBlockReleaseRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *AbortBlockReleaseRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

type TeleportRequest struct {
	EnvId                string   `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	BlockName            string   `protobuf:"bytes,2,opt,name=blockName,proto3" json:"blockName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeleportRequest) Reset()         { *m = TeleportRequest{} }
func (m *TeleportRequest) String() string { return proto.CompactTextString(m) }
func (*TeleportRequest) ProtoMessage()    {}
func (*TeleportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{24}
}

func (m *TeleportRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeleportRequest.Unmarshal(m, b)
}
func (m *TeleportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeleportRequest.Marshal(b, m, deterministic)
}
func (m *TeleportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeleportRequest.Merge(m, src)
}
func (m *TeleportRequest) XXX_Size() int {
	return xxx_messageInfo_TeleportRequest.Size(m)
}
func (m *TeleportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeleportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeleportRequest proto.InternalMessageInfo

func (m *TeleportRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *TeleportRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

type TeleportResponse struct {
	Data                 *TeleportServiceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TeleportResponse) Reset()         { *m = TeleportResponse{} }
func (m *TeleportResponse) String() string { return proto.CompactTextString(m) }
func (*TeleportResponse) ProtoMessage()    {}
func (*TeleportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{25}
}

func (m *TeleportResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeleportResponse.Unmarshal(m, b)
}
func (m *TeleportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeleportResponse.Marshal(b, m, deterministic)
}
func (m *TeleportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeleportResponse.Merge(m, src)
}
func (m *TeleportResponse) XXX_Size() int {
	return xxx_messageInfo_TeleportResponse.Size(m)
}
func (m *TeleportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TeleportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TeleportResponse proto.InternalMessageInfo

func (m *TeleportResponse) GetData() *TeleportServiceData {
	if m != nil {
		return m.Data
	}
	return nil
}

type TagReleaseRequest struct {
	BlockName            string   `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	ReleaseId            string   `protobuf:"bytes,2,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	EnvId                string   `protobuf:"bytes,3,opt,name=envId,proto3" json:"envId,omitempty"`
	Tag                  string   `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagReleaseRequest) Reset()         { *m = TagReleaseRequest{} }
func (m *TagReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*TagReleaseRequest) ProtoMessage()    {}
func (*TagReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{26}
}

func (m *TagReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagReleaseRequest.Unmarshal(m, b)
}
func (m *TagReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagReleaseRequest.Marshal(b, m, deterministic)
}
func (m *TagReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagReleaseRequest.Merge(m, src)
}
func (m *TagReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_TagReleaseRequest.Size(m)
}
func (m *TagReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TagReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TagReleaseRequest proto.InternalMessageInfo

func (m *TagReleaseRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *TagReleaseRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *TagReleaseRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *TagReleaseRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type PromoteReleaseRequest struct {
	EnvId                string   `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	BlockName            string   `protobuf:"bytes,2,opt,name=blockName,proto3" json:"blockName,omitempty"`
	Tag                  string   `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	ReleaseId            string   `protobuf:"bytes,4,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	TargetEnvId          string   `protobuf:"bytes,5,opt,name=targetEnvId,proto3" json:"targetEnvId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PromoteReleaseRequest) Reset()         { *m = PromoteReleaseRequest{} }
func (m *PromoteReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*PromoteReleaseRequest) ProtoMessage()    {}
func (*PromoteReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{27}
}

func (m *PromoteReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PromoteReleaseRequest.Unmarshal(m, b)
}
func (m *PromoteReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PromoteReleaseRequest.Marshal(b, m, deterministic)
}
func (m *PromoteReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoteReleaseRequest.Merge(m, src)
}
func (m *PromoteReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_PromoteReleaseRequest.Size(m)
}
func (m *PromoteReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoteReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PromoteReleaseRequest proto.InternalMessageInfo

func (m *PromoteReleaseRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *PromoteReleaseRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *PromoteReleaseRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *PromoteReleaseRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *PromoteReleaseRequest) GetTargetEnvId() string {
	if m != nil {
		return m.TargetEnvId
	}
	return ""
}

type GenReleaseConfigFromKintoFileRepoRequest struct {
	BlockType            Block_Type `protobuf:"varint,1,opt,name=blockType,proto3,enum=Block_Type" json:"blockType,omitempty"`
	Org                  string     `protobuf:"bytes,2,opt,name=org,proto3" json:"org,omitempty"`
	Repo                 string     `protobuf:"bytes,3,opt,name=repo,proto3" json:"repo,omitempty"`
	Branch               string     `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	EnvId                string     `protobuf:"bytes,5,opt,name=envId,proto3" json:"envId,omitempty"`
	GithubUserToken      string     `protobuf:"bytes,6,opt,name=githubUserToken,proto3" json:"githubUserToken,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GenReleaseConfigFromKintoFileRepoRequest) Reset() {
	*m = GenReleaseConfigFromKintoFileRepoRequest{}
}
func (m *GenReleaseConfigFromKintoFileRepoRequest) String() string { return proto.CompactTextString(m) }
func (*GenReleaseConfigFromKintoFileRepoRequest) ProtoMessage()    {}
func (*GenReleaseConfigFromKintoFileRepoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{28}
}

func (m *GenReleaseConfigFromKintoFileRepoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenReleaseConfigFromKintoFileRepoRequest.Unmarshal(m, b)
}
func (m *GenReleaseConfigFromKintoFileRepoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenReleaseConfigFromKintoFileRepoRequest.Marshal(b, m, deterministic)
}
func (m *GenReleaseConfigFromKintoFileRepoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenReleaseConfigFromKintoFileRepoRequest.Merge(m, src)
}
func (m *GenReleaseConfigFromKintoFileRepoRequest) XXX_Size() int {
	return xxx_messageInfo_GenReleaseConfigFromKintoFileRepoRequest.Size(m)
}
func (m *GenReleaseConfigFromKintoFileRepoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenReleaseConfigFromKintoFileRepoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenReleaseConfigFromKintoFileRepoRequest proto.InternalMessageInfo

func (m *GenReleaseConfigFromKintoFileRepoRequest) GetBlockType() Block_Type {
	if m != nil {
		return m.BlockType
	}
	return Block_NOT_SET
}

func (m *GenReleaseConfigFromKintoFileRepoRequest) GetOrg() string {
	if m != nil {
		return m.Org
	}
	return ""
}

func (m *GenReleaseConfigFromKintoFileRepoRequest) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *GenReleaseConfigFromKintoFileRepoRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *GenReleaseConfigFromKintoFileRepoRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *GenReleaseConfigFromKintoFileRepoRequest) GetGithubUserToken() string {
	if m != nil {
		return m.GithubUserToken
	}
	return ""
}

type SyncTimeRequest struct {
	SendTimeMs           int64    `protobuf:"varint,1,opt,name=sendTimeMs,proto3" json:"sendTimeMs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncTimeRequest) Reset()         { *m = SyncTimeRequest{} }
func (m *SyncTimeRequest) String() string { return proto.CompactTextString(m) }
func (*SyncTimeRequest) ProtoMessage()    {}
func (*SyncTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{29}
}

func (m *SyncTimeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncTimeRequest.Unmarshal(m, b)
}
func (m *SyncTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncTimeRequest.Marshal(b, m, deterministic)
}
func (m *SyncTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncTimeRequest.Merge(m, src)
}
func (m *SyncTimeRequest) XXX_Size() int {
	return xxx_messageInfo_SyncTimeRequest.Size(m)
}
func (m *SyncTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncTimeRequest proto.InternalMessageInfo

func (m *SyncTimeRequest) GetSendTimeMs() int64 {
	if m != nil {
		return m.SendTimeMs
	}
	return 0
}

type SyncTimeResponse struct {
	ClientTimestampMs    int64    `protobuf:"varint,1,opt,name=clientTimestampMs,proto3" json:"clientTimestampMs,omitempty"`
	ServerTimestampMs    int64    `protobuf:"varint,2,opt,name=serverTimestampMs,proto3" json:"serverTimestampMs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncTimeResponse) Reset()         { *m = SyncTimeResponse{} }
func (m *SyncTimeResponse) String() string { return proto.CompactTextString(m) }
func (*SyncTimeResponse) ProtoMessage()    {}
func (*SyncTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_567dc07f2147c6c0, []int{30}
}

func (m *SyncTimeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncTimeResponse.Unmarshal(m, b)
}
func (m *SyncTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncTimeResponse.Marshal(b, m, deterministic)
}
func (m *SyncTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncTimeResponse.Merge(m, src)
}
func (m *SyncTimeResponse) XXX_Size() int {
	return xxx_messageInfo_SyncTimeResponse.Size(m)
}
func (m *SyncTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncTimeResponse proto.InternalMessageInfo

func (m *SyncTimeResponse) GetClientTimestampMs() int64 {
	if m != nil {
		return m.ClientTimestampMs
	}
	return 0
}

func (m *SyncTimeResponse) GetServerTimestampMs() int64 {
	if m != nil {
		return m.ServerTimestampMs
	}
	return 0
}

func init() {
	proto.RegisterType((*EnvironmentQueryRequest)(nil), "EnvironmentQueryRequest")
	proto.RegisterType((*CreateEnvironmentRequest)(nil), "CreateEnvironmentRequest")
	proto.RegisterType((*UpdateEnvironmentRequest)(nil), "UpdateEnvironmentRequest")
	proto.RegisterType((*DeleteEnvironmentRequest)(nil), "DeleteEnvironmentRequest")
	proto.RegisterType((*CreateBlockRequest)(nil), "CreateBlockRequest")
	proto.RegisterType((*DeployBlockRequest)(nil), "DeployBlockRequest")
	proto.RegisterType((*TriggerDeployRequest)(nil), "TriggerDeployRequest")
	proto.RegisterType((*SuspendBlockRequest)(nil), "SuspendBlockRequest")
	proto.RegisterType((*BlockQueryRequest)(nil), "BlockQueryRequest")
	proto.RegisterType((*DeleteBlockRequest)(nil), "DeleteBlockRequest")
	proto.RegisterType((*BlockUpdateResponse)(nil), "BlockUpdateResponse")
	proto.RegisterType((*WatchBuildLogsRequest)(nil), "WatchBuildLogsRequest")
	proto.RegisterType((*WatchConsoleLogsRequest)(nil), "WatchConsoleLogsRequest")
	proto.RegisterType((*UpdateBuildStatusRequest)(nil), "UpdateBuildStatusRequest")
	proto.RegisterType((*UpdateBuildStepRequest)(nil), "UpdateBuildStepRequest")
	proto.RegisterType((*UpdateBuildStatusResponse)(nil), "UpdateBuildStatusResponse")
	proto.RegisterType((*UpdateBuildCommitShaRequest)(nil), "UpdateBuildCommitShaRequest")
	proto.RegisterType((*KillBlockInstanceRequest)(nil), "KillBlockInstanceRequest")
	proto.RegisterType((*RollbackBlockRequest)(nil), "RollbackBlockRequest")
	proto.RegisterType((*CustomDomainNameRequest)(nil), "CustomDomainNameRequest")
	proto.RegisterType((*CheckCustomDomainNameResponse)(nil), "CheckCustomDomainNameResponse")
	proto.RegisterType((*EnablePublicURLRequest)(nil), "EnablePublicURLRequest")
	proto.RegisterType((*DisablePublicURLRequest)(nil), "DisablePublicURLRequest")
	proto.RegisterType((*AbortBlockReleaseRequest)(nil), "AbortBlockReleaseRequest")
	proto.RegisterType((*TeleportRequest)(nil), "TeleportRequest")
	proto.RegisterType((*TeleportResponse)(nil), "TeleportResponse")
	proto.RegisterType((*TagReleaseRequest)(nil), "TagReleaseRequest")
	proto.RegisterType((*PromoteReleaseRequest)(nil), "PromoteReleaseRequest")
	proto.RegisterType((*GenReleaseConfigFromKintoFileRepoRequest)(nil), "GenReleaseConfigFromKintoFileRepoRequest")
	proto.RegisterType((*SyncTimeRequest)(nil), "SyncTimeRequest")
	proto.RegisterType((*SyncTimeResponse)(nil), "SyncTimeResponse")
}

func init() {
	proto.RegisterFile("coreapi.proto", fileDescriptor_567dc07f2147c6c0)
}

var fileDescriptor_567dc07f2147c6c0 = []byte{
	// 1535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcb, 0x6e, 0xdb, 0x46,
	0x17, 0x16, 0x7d, 0xfb, 0xed, 0x23, 0x5b, 0x96, 0xc6, 0xb2, 0x2c, 0x29, 0x4e, 0x60, 0x0c, 0xb2,
	0x90, 0x93, 0xff, 0x1f, 0xff, 0x71, 0x50, 0xa0, 0x08, 0x1c, 0x37, 0xb1, 0x7c, 0x89, 0x13, 0x3b,
	0x4d, 0x29, 0x07, 0x01, 0x8a, 0xa2, 0x00, 0x45, 0x4d, 0x64, 0xc6, 0x14, 0x87, 0x1d, 0x8e, 0x5c,
	0xe8, 0x21, 0xba, 0xe9, 0xaa, 0x9b, 0x3e, 0x43, 0xdf, 0xa0, 0xe8, 0x3b, 0x74, 0xd1, 0xd7, 0x29,
	0x38, 0x24, 0xc5, 0x3b, 0xe1, 0x3a, 0x09, 0xd0, 0xdd, 0xcc, 0x99, 0x73, 0x9f, 0x33, 0x67, 0xce,
	0x07, 0x2b, 0x3a, 0xe3, 0x54, 0xb3, 0x0d, 0x62, 0x73, 0x26, 0x58, 0xfb, 0xce, 0x90, 0xb1, 0xa1,
	0x49, 0x77, 0xe4, 0xae, 0x3f, 0x7e, 0xbf, 0x43, 0x47, 0xb6, 0x98, 0xf8, 0x87, 0xcb, 0x23, 0x36,
	0xa0, 0xa6, 0xe3, 0xed, 0xf0, 0x36, 0x6c, 0x1c, 0x59, 0xd7, 0x06, 0x67, 0xd6, 0x88, 0x5a, 0xe2,
	0x9b, 0x31, 0xe5, 0x13, 0x95, 0xfe, 0x30, 0xa6, 0x8e, 0x40, 0x15, 0x98, 0x31, 0x06, 0x4d, 0x65,
	0x4b, 0xe9, 0x2c, 0xa9, 0x33, 0xc6, 0x00, 0x13, 0x68, 0x76, 0x39, 0xd5, 0x04, 0x8d, 0x08, 0x04,
	0xbc, 0x08, 0xe6, 0x2c, 0x6d, 0x44, 0x7d, 0x6e, 0xb9, 0xc6, 0xfb, 0xd0, 0x7c, 0x6b, 0x0f, 0xb2,
	0xf9, 0x13, 0xba, 0xa7, 0xf2, 0x33, 0x11, 0xf9, 0x07, 0xd0, 0x3c, 0xa4, 0x26, 0xbd, 0x89, 0x3c,
	0xfe, 0x45, 0x01, 0xe4, 0x39, 0x77, 0x60, 0x32, 0xfd, 0x2a, 0x60, 0xab, 0xc3, 0x3c, 0xb5, 0xae,
	0x4f, 0x03, 0x4e, 0x6f, 0x93, 0x65, 0x0c, 0x75, 0x60, 0x89, 0x8f, 0xad, 0x2e, 0xb3, 0xde, 0x1b,
	0xc3, 0xe6, 0xec, 0x96, 0xd2, 0x29, 0xef, 0x02, 0x51, 0x03, 0x8a, 0x1a, 0x1e, 0x22, 0x02, 0xe5,
	0xfe, 0xd8, 0x30, 0x07, 0x3e, 0xef, 0x9c, 0xe4, 0x5d, 0x26, 0x07, 0x21, 0x4d, 0x8d, 0x32, 0xe0,
	0xdf, 0x15, 0x40, 0x87, 0xd4, 0x36, 0xd9, 0xe4, 0xdf, 0xe6, 0x1a, 0xba, 0x0f, 0x2b, 0x7d, 0xcd,
	0xa1, 0x2a, 0x35, 0xa9, 0xe6, 0xd0, 0xd3, 0x41, 0x73, 0x5e, 0x9a, 0x8d, 0x13, 0xf1, 0x33, 0xa8,
	0x5f, 0x70, 0x63, 0x38, 0xa4, 0xdc, 0x0b, 0xe3, 0x1f, 0x47, 0x80, 0xbf, 0x82, 0xb5, 0xde, 0xd8,
	0xb1, 0xa9, 0x35, 0xb8, 0x5d, 0x0a, 0xf0, 0x53, 0xa8, 0x49, 0xc9, 0x58, 0x7d, 0xde, 0x5c, 0x7c,
	0xdf, 0xbd, 0x01, 0xb7, 0x92, 0x6e, 0x69, 0xfe, 0x04, 0xd6, 0xa4, 0xa4, 0x57, 0xce, 0x2a, 0x75,
	0x6c, 0x66, 0x39, 0x34, 0xab, 0xe8, 0xd1, 0x26, 0x2c, 0xf1, 0x69, 0x3a, 0x3d, 0x1d, 0x21, 0x01,
	0x1b, 0xb0, 0xfe, 0x4e, 0x13, 0xfa, 0xa5, 0xbc, 0x91, 0x33, 0x36, 0x74, 0x02, 0x5f, 0x62, 0x62,
	0x4a, 0x42, 0xcc, 0x3d, 0xed, 0xbb, 0xf6, 0x5f, 0x87, 0x8e, 0x85, 0x84, 0x30, 0x8e, 0xd9, 0x48,
	0x1c, 0xf8, 0x1c, 0x36, 0xa4, 0xa9, 0x2e, 0xb3, 0x1c, 0x66, 0xd2, 0x84, 0xb1, 0x50, 0x9d, 0x92,
	0xab, 0x6e, 0x26, 0xaa, 0xee, 0x67, 0x25, 0x78, 0xcd, 0xd2, 0xf7, 0x9e, 0xd0, 0xc4, 0xf8, 0x63,
	0x14, 0xc6, 0x23, 0x9e, 0x4d, 0x46, 0x7c, 0x1f, 0x16, 0x1c, 0x69, 0x42, 0x96, 0xe4, 0xb4, 0x88,
	0x7d, 0xb3, 0xfe, 0x19, 0x56, 0xa1, 0x11, 0xf3, 0x89, 0xda, 0x05, 0xfd, 0x28, 0xa2, 0x73, 0xa6,
	0x40, 0xe7, 0x43, 0x68, 0x65, 0xc4, 0xe9, 0xdf, 0x78, 0xb2, 0xed, 0xfc, 0xa4, 0xc0, 0x9d, 0x08,
	0x77, 0x97, 0x8d, 0x46, 0x86, 0xe8, 0x5d, 0x6a, 0x9f, 0x2f, 0x31, 0x9b, 0xb0, 0xa4, 0x07, 0x56,
	0xe4, 0x03, 0x5f, 0x52, 0x43, 0x02, 0x7e, 0x06, 0xcd, 0x57, 0x86, 0x69, 0xca, 0x62, 0x3d, 0xb5,
	0x1c, 0xa1, 0x59, 0x3a, 0xcd, 0x6b, 0xb9, 0xd9, 0xf7, 0xfc, 0x3d, 0xd4, 0x55, 0x66, 0x9a, 0x7d,
	0x4d, 0xbf, 0x8a, 0x3d, 0x96, 0xac, 0x84, 0xde, 0xc2, 0x7f, 0xfc, 0x87, 0x02, 0x1b, 0xdd, 0xb1,
	0x23, 0xd8, 0xe8, 0x90, 0x8d, 0x34, 0xc3, 0x72, 0x13, 0x51, 0xfc, 0x20, 0x8b, 0x8b, 0xff, 0x01,
	0x54, 0xf5, 0x84, 0x3a, 0xdf, 0x68, 0x8a, 0xee, 0xea, 0xef, 0xbe, 0x7e, 0x7e, 0x7e, 0xe4, 0xe7,
	0xcd, 0xdb, 0xa0, 0x1d, 0x58, 0x94, 0x5f, 0xa1, 0xce, 0x4c, 0x59, 0x6c, 0x95, 0xdd, 0xb5, 0xb0,
	0xbb, 0x92, 0x37, 0xfe, 0x91, 0x3a, 0x65, 0xc2, 0xbf, 0x29, 0x70, 0xb7, 0x7b, 0x49, 0xf5, 0xab,
	0x74, 0x1c, 0x7e, 0x99, 0x6c, 0xc2, 0x92, 0xe1, 0x48, 0xed, 0x5f, 0xbf, 0x92, 0xc1, 0x2c, 0xaa,
	0x21, 0x01, 0x6d, 0x41, 0x59, 0x2e, 0xdf, 0x69, 0x96, 0xa0, 0x41, 0xf2, 0xa2, 0x24, 0x74, 0x0f,
	0x40, 0x6e, 0x8f, 0xd9, 0xd8, 0x0a, 0x72, 0x18, 0xa1, 0x20, 0x02, 0xc8, 0x70, 0xba, 0x94, 0x0b,
	0xe3, 0xbd, 0xa1, 0xcb, 0x8e, 0xa4, 0x0d, 0x26, 0x32, 0xaa, 0x45, 0x35, 0xe3, 0x04, 0x7f, 0x80,
	0xc6, 0x91, 0xa5, 0xf5, 0x4d, 0xfa, 0x66, 0xdc, 0x37, 0x0d, 0xfd, 0xad, 0x7a, 0xf6, 0xd9, 0x0a,
	0xd4, 0xed, 0x3b, 0x87, 0x86, 0xf3, 0xa9, 0x8c, 0x61, 0x13, 0x9a, 0xcf, 0xfb, 0x8c, 0x0b, 0xbf,
	0x18, 0xa5, 0x95, 0x9b, 0xe9, 0x2b, 0xec, 0xc4, 0x39, 0x4d, 0xf3, 0x08, 0x56, 0x2f, 0xa8, 0x49,
	0x6d, 0xc6, 0xc5, 0x47, 0x14, 0x25, 0xde, 0x83, 0x6a, 0xa8, 0xc6, 0xaf, 0x89, 0x0e, 0xcc, 0x0d,
	0x34, 0xa1, 0x49, 0x35, 0xe5, 0xdd, 0x3a, 0x09, 0x18, 0x7a, 0x94, 0x5f, 0x1b, 0x3a, 0x3d, 0xd4,
	0x84, 0xa6, 0x4a, 0x0e, 0xfc, 0x23, 0xd4, 0x2e, 0xb4, 0xe1, 0xe7, 0x8e, 0x15, 0x55, 0x61, 0x56,
	0x68, 0x43, 0xff, 0x2d, 0xb8, 0x4b, 0xfc, 0xab, 0x02, 0xeb, 0x6f, 0x38, 0x1b, 0x31, 0x41, 0x13,
	0xd6, 0x6f, 0xf3, 0x32, 0x7d, 0xfd, 0xb3, 0x53, 0xfd, 0x71, 0x2f, 0xe7, 0x92, 0x5e, 0x6e, 0x41,
	0x59, 0x68, 0x7c, 0x48, 0xc5, 0x91, 0xb4, 0xe4, 0x8d, 0x22, 0x51, 0x12, 0xfe, 0x53, 0x81, 0xce,
	0x09, 0xb5, 0x7c, 0xdf, 0xbc, 0x07, 0x7a, 0xcc, 0xd9, 0xe8, 0x95, 0x61, 0x09, 0x76, 0x6c, 0x98,
	0x54, 0xa5, 0x36, 0x0b, 0x5c, 0xde, 0xf6, 0x9d, 0xbb, 0x98, 0xd8, 0x5e, 0xc2, 0x2a, 0xbb, 0x65,
	0x22, 0xab, 0x88, 0xb8, 0x24, 0x35, 0x3c, 0x75, 0x3d, 0x65, 0x7c, 0xe8, 0x47, 0xe0, 0x2e, 0xdd,
	0x6e, 0xc7, 0xa9, 0xcd, 0x7c, 0xe7, 0xe5, 0x1a, 0x35, 0x60, 0xa1, 0xcf, 0x35, 0x4b, 0xbf, 0xf4,
	0x5d, 0xf7, 0x77, 0x61, 0x6e, 0xe6, 0xa3, 0xb9, 0xe9, 0xc0, 0xea, 0xd0, 0x10, 0x97, 0xe3, 0xfe,
	0x5b, 0x87, 0xf2, 0x0b, 0x76, 0x45, 0xad, 0xe6, 0x82, 0x3c, 0x4f, 0x92, 0xf1, 0x23, 0x58, 0xed,
	0x4d, 0x2c, 0xfd, 0xc2, 0x08, 0x1b, 0xe1, 0x3d, 0x00, 0x87, 0x5a, 0x03, 0x97, 0x74, 0xee, 0x48,
	0xe7, 0x67, 0xd5, 0x08, 0x05, 0x5b, 0x50, 0x0d, 0x45, 0xfc, 0xfa, 0xfa, 0x2f, 0xd4, 0x74, 0xd3,
	0xa0, 0x96, 0x70, 0xa9, 0x8e, 0xd0, 0x46, 0xf6, 0x54, 0x34, 0x7d, 0xe0, 0x72, 0x3b, 0x94, 0x5f,
	0x53, 0x1e, 0xe5, 0x9e, 0xf1, 0xb8, 0x53, 0x07, 0xbb, 0x7f, 0xd5, 0xa0, 0x2a, 0x93, 0xdc, 0x65,
	0x9c, 0xfa, 0x05, 0x8b, 0x9e, 0x40, 0xe5, 0x44, 0xde, 0x4c, 0x30, 0x9b, 0xa3, 0x26, 0xc9, 0x81,
	0x12, 0xed, 0xe5, 0xe8, 0x09, 0x2e, 0xa1, 0x27, 0xb0, 0x1a, 0x97, 0x75, 0x50, 0x83, 0x78, 0xa0,
	0x85, 0x04, 0xa0, 0x85, 0x1c, 0xb9, 0xa0, 0xa5, 0xbd, 0x12, 0x15, 0x75, 0x70, 0x09, 0xed, 0x43,
	0x2d, 0x05, 0x43, 0x50, 0x8b, 0xe4, 0x41, 0x93, 0x94, 0xed, 0x7d, 0xa8, 0xa5, 0x60, 0x09, 0x6a,
	0x91, 0x3c, 0xa8, 0x92, 0x92, 0x7f, 0x01, 0xb5, 0x14, 0x2c, 0x41, 0x2d, 0x92, 0x07, 0x55, 0xda,
	0x39, 0x81, 0xc9, 0x2c, 0x94, 0x23, 0x98, 0x05, 0xad, 0x91, 0x34, 0x82, 0x69, 0xd7, 0x49, 0xc6,
	0xe4, 0x89, 0x4b, 0xe8, 0x99, 0xeb, 0xc5, 0x14, 0x54, 0x78, 0xc7, 0x68, 0x8d, 0xa4, 0x81, 0x46,
	0xae, 0x86, 0x7d, 0x58, 0x89, 0x8d, 0xf5, 0x68, 0x9d, 0x64, 0x8d, 0xf9, 0x45, 0xf2, 0xb1, 0x49,
	0x01, 0xad, 0x93, 0xac, 0xc9, 0x21, 0x57, 0xfe, 0x01, 0x2c, 0x9d, 0x50, 0xaf, 0xaf, 0x3b, 0x08,
	0x91, 0xd4, 0x7c, 0xdf, 0xfe, 0x8f, 0x47, 0x73, 0xef, 0xbc, 0x03, 0x8b, 0x01, 0x6f, 0x26, 0xeb,
	0x82, 0x47, 0xc3, 0x25, 0xb4, 0x07, 0xe5, 0xc8, 0xa8, 0x2f, 0x33, 0x92, 0x1c, 0xfc, 0x0b, 0x6e,
	0x64, 0x0f, 0x96, 0xa3, 0x40, 0x05, 0xd5, 0x49, 0x06, 0x6e, 0x29, 0xc8, 0xc8, 0x9a, 0x1c, 0xb9,
	0xfd, 0x06, 0xe5, 0x78, 0xc3, 0x63, 0xa6, 0xc3, 0xab, 0x24, 0xce, 0x84, 0x4b, 0xff, 0x57, 0xdc,
	0xca, 0x4a, 0x4d, 0x6f, 0xa8, 0x45, 0xf2, 0x26, 0xba, 0x82, 0x38, 0xba, 0xb0, 0x2c, 0x7f, 0x4d,
	0xdf, 0x08, 0x6a, 0x91, 0xbc, 0x4f, 0xb4, 0xb0, 0x3c, 0x21, 0xfc, 0x87, 0x10, 0x22, 0xa9, 0x4f,
	0xa9, 0x40, 0xf6, 0x00, 0x2a, 0xf1, 0x9f, 0x04, 0x35, 0x48, 0xe6, 0xd7, 0x52, 0xa0, 0xe3, 0x3b,
	0xb8, 0x5b, 0xd8, 0xed, 0xd1, 0x36, 0xb9, 0xe9, 0x6f, 0xd0, 0xae, 0x90, 0x18, 0x1f, 0x2e, 0xa1,
	0xc7, 0x50, 0x89, 0x43, 0x31, 0xd4, 0x20, 0x99, 0xd8, 0xac, 0x3d, 0x4f, 0xdc, 0x9d, 0xbc, 0xa1,
	0xb3, 0xa0, 0x77, 0x44, 0xc0, 0xc1, 0xb4, 0x77, 0xa4, 0x81, 0x51, 0xbb, 0x4d, 0x72, 0xb1, 0x04,
	0x2e, 0xa1, 0xd7, 0x50, 0xcf, 0x02, 0x0f, 0x68, 0x93, 0x14, 0x60, 0x8a, 0x82, 0x84, 0x9d, 0x42,
	0xcb, 0x8b, 0x40, 0x3e, 0x9b, 0x17, 0x54, 0x33, 0xc5, 0xa5, 0x67, 0x94, 0x3a, 0x05, 0xcd, 0xb9,
	0xe2, 0xd5, 0x67, 0xc0, 0x29, 0x03, 0xfd, 0x02, 0x56, 0xa5, 0xaa, 0x97, 0xac, 0x5f, 0x54, 0xc6,
	0x40, 0x5e, 0xb2, 0x7e, 0xa4, 0x82, 0xf7, 0x00, 0x45, 0x3c, 0x38, 0xa7, 0x82, 0x1b, 0x7a, 0xb6,
	0xa4, 0x6f, 0x34, 0xe0, 0x91, 0xd2, 0x4f, 0xa1, 0x9a, 0x84, 0xac, 0xa8, 0x49, 0x72, 0x50, 0x6c,
	0xbb, 0x4c, 0x42, 0xa2, 0x14, 0x3f, 0x86, 0xf5, 0x13, 0x2a, 0xfc, 0x7f, 0xca, 0xbd, 0xe5, 0x31,
	0xd7, 0x84, 0xc1, 0xac, 0xdc, 0xaf, 0x65, 0x8d, 0xa4, 0x99, 0x71, 0x09, 0x9d, 0x41, 0xc3, 0x6b,
	0xc4, 0xc9, 0xf9, 0x1e, 0x35, 0x49, 0x0e, 0x74, 0x29, 0xb8, 0x94, 0x33, 0x68, 0x78, 0x2d, 0xe8,
	0x93, 0x68, 0xeb, 0xc1, 0x7a, 0x26, 0xf4, 0x28, 0x50, 0x76, 0x8f, 0x14, 0x82, 0x15, 0x5c, 0x42,
	0x87, 0xb0, 0x9a, 0x80, 0x07, 0x68, 0x83, 0x64, 0x03, 0x86, 0x02, 0xd7, 0x8e, 0xa1, 0x9a, 0x1c,
	0xfc, 0x51, 0x93, 0xe4, 0x60, 0x81, 0x02, 0x3d, 0x5f, 0xc2, 0x4a, 0x4f, 0x68, 0x5c, 0x04, 0x03,
	0x32, 0xaa, 0x92, 0xc4, 0x4c, 0xde, 0xae, 0x91, 0xe4, 0x78, 0x2d, 0x0b, 0xe0, 0x11, 0x2c, 0x06,
	0x63, 0x11, 0xaa, 0x92, 0xc4, 0x50, 0xd5, 0xae, 0x91, 0xe4, 0xcc, 0x84, 0x4b, 0x07, 0x0f, 0xbf,
	0xdd, 0xf6, 0xe6, 0x31, 0xa2, 0xb3, 0xd1, 0xce, 0x95, 0x5b, 0x0e, 0x36, 0x67, 0x1f, 0xbc, 0xd5,
	0xff, 0x74, 0xc6, 0xe9, 0x8e, 0x7d, 0x35, 0xdc, 0x11, 0x13, 0x9b, 0x3a, 0xfd, 0x05, 0xe9, 0xeb,
	0xe3, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x48, 0xb4, 0x99, 0x6e, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KintoCoreServiceClient is the client API for KintoCoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KintoCoreServiceClient interface {
	GetEnvironment(ctx context.Context, in *EnvironmentQueryRequest, opts ...grpc.CallOption) (*Environment, error)
	GetEnvironments(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Environments, error)
	CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error)
	UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error)
	DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateBlock(ctx context.Context, in *CreateBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error)
	DeployBlockUpdate(ctx context.Context, in *DeployBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error)
	TriggerDeploy(ctx context.Context, in *TriggerDeployRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error)
	RollbackBlock(ctx context.Context, in *RollbackBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error)
	GetBlocks(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (*Blocks, error)
	GetBlock(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (*Block, error)
	DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SuspendBlock(ctx context.Context, in *SuspendBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error)
	WatchReleasesStatus(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoCoreService_WatchReleasesStatusClient, error)
	KillBlockInstance(ctx context.Context, in *KillBlockInstanceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AbortRelease(ctx context.Context, in *AbortBlockReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	TagRelease(ctx context.Context, in *TagReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PromoteRelease(ctx context.Context, in *PromoteReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GenReleaseConfigFromKintoFile(ctx context.Context, in *GenReleaseConfigFromKintoFileRepoRequest, opts ...grpc.CallOption) (*ReleaseConfig, error)
	WatchBuildLogs(ctx context.Context, in *WatchBuildLogsRequest, opts ...grpc.CallOption) (KintoCoreService_WatchBuildLogsClient, error)
	UpdateBuildStatus(ctx context.Context, in *UpdateBuildStatusRequest, opts ...grpc.CallOption) (*UpdateBuildStatusResponse, error)
	UpdateBuildCommitSha(ctx context.Context, in *UpdateBuildCommitShaRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	WatchBlocksHealthStatuses(ctx context.Context, in *EnvironmentQueryRequest, opts ...grpc.CallOption) (KintoCoreService_WatchBlocksHealthStatusesClient, error)
	WatchJobsStatus(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoCoreService_WatchJobsStatusClient, error)
	WatchBlocksMetrics(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoCoreService_WatchBlocksMetricsClient, error)
	WatchConsoleLogs(ctx context.Context, in *WatchConsoleLogsRequest, opts ...grpc.CallOption) (KintoCoreService_WatchConsoleLogsClient, error)
	GetKintoConfiguration(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*KintoConfiguration, error)
	CreateCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*CheckCustomDomainNameResponse, error)
	EnablePublicURL(ctx context.Context, in *EnablePublicURLRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DisablePublicURL(ctx context.Context, in *DisablePublicURLRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	StartTeleport(ctx context.Context, in *TeleportRequest, opts ...grpc.CallOption) (KintoCoreService_StartTeleportClient, error)
	SyncTime(ctx context.Context, in *SyncTimeRequest, opts ...grpc.CallOption) (*SyncTimeResponse, error)
}

type kintoCoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKintoCoreServiceClient(cc grpc.ClientConnInterface) KintoCoreServiceClient {
	return &kintoCoreServiceClient{cc}
}

func (c *kintoCoreServiceClient) GetEnvironment(ctx context.Context, in *EnvironmentQueryRequest, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, "/KintoCoreService/GetEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) GetEnvironments(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Environments, error) {
	out := new(Environments)
	err := c.cc.Invoke(ctx, "/KintoCoreService/GetEnvironments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, "/KintoCoreService/CreateEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, "/KintoCoreService/UpdateEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoCoreService/DeleteEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) CreateBlock(ctx context.Context, in *CreateBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error) {
	out := new(BlockUpdateResponse)
	err := c.cc.Invoke(ctx, "/KintoCoreService/CreateBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) DeployBlockUpdate(ctx context.Context, in *DeployBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error) {
	out := new(BlockUpdateResponse)
	err := c.cc.Invoke(ctx, "/KintoCoreService/DeployBlockUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) TriggerDeploy(ctx context.Context, in *TriggerDeployRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error) {
	out := new(BlockUpdateResponse)
	err := c.cc.Invoke(ctx, "/KintoCoreService/TriggerDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) RollbackBlock(ctx context.Context, in *RollbackBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error) {
	out := new(BlockUpdateResponse)
	err := c.cc.Invoke(ctx, "/KintoCoreService/RollbackBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) GetBlocks(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (*Blocks, error) {
	out := new(Blocks)
	err := c.cc.Invoke(ctx, "/KintoCoreService/GetBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) GetBlock(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/KintoCoreService/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoCoreService/DeleteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) SuspendBlock(ctx context.Context, in *SuspendBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error) {
	out := new(BlockUpdateResponse)
	err := c.cc.Invoke(ctx, "/KintoCoreService/SuspendBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) WatchReleasesStatus(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoCoreService_WatchReleasesStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoCoreService_serviceDesc.Streams[0], "/KintoCoreService/WatchReleasesStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoCoreServiceWatchReleasesStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoCoreService_WatchReleasesStatusClient interface {
	Recv() (*ReleasesStatus, error)
	grpc.ClientStream
}

type kintoCoreServiceWatchReleasesStatusClient struct {
	grpc.ClientStream
}

func (x *kintoCoreServiceWatchReleasesStatusClient) Recv() (*ReleasesStatus, error) {
	m := new(ReleasesStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoCoreServiceClient) KillBlockInstance(ctx context.Context, in *KillBlockInstanceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoCoreService/KillBlockInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) AbortRelease(ctx context.Context, in *AbortBlockReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoCoreService/AbortRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) TagRelease(ctx context.Context, in *TagReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoCoreService/TagRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) PromoteRelease(ctx context.Context, in *PromoteReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoCoreService/PromoteRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) GenReleaseConfigFromKintoFile(ctx context.Context, in *GenReleaseConfigFromKintoFileRepoRequest, opts ...grpc.CallOption) (*ReleaseConfig, error) {
	out := new(ReleaseConfig)
	err := c.cc.Invoke(ctx, "/KintoCoreService/GenReleaseConfigFromKintoFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) WatchBuildLogs(ctx context.Context, in *WatchBuildLogsRequest, opts ...grpc.CallOption) (KintoCoreService_WatchBuildLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoCoreService_serviceDesc.Streams[1], "/KintoCoreService/WatchBuildLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoCoreServiceWatchBuildLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoCoreService_WatchBuildLogsClient interface {
	Recv() (*Logs, error)
	grpc.ClientStream
}

type kintoCoreServiceWatchBuildLogsClient struct {
	grpc.ClientStream
}

func (x *kintoCoreServiceWatchBuildLogsClient) Recv() (*Logs, error) {
	m := new(Logs)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoCoreServiceClient) UpdateBuildStatus(ctx context.Context, in *UpdateBuildStatusRequest, opts ...grpc.CallOption) (*UpdateBuildStatusResponse, error) {
	out := new(UpdateBuildStatusResponse)
	err := c.cc.Invoke(ctx, "/KintoCoreService/UpdateBuildStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) UpdateBuildCommitSha(ctx context.Context, in *UpdateBuildCommitShaRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoCoreService/UpdateBuildCommitSha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) WatchBlocksHealthStatuses(ctx context.Context, in *EnvironmentQueryRequest, opts ...grpc.CallOption) (KintoCoreService_WatchBlocksHealthStatusesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoCoreService_serviceDesc.Streams[2], "/KintoCoreService/WatchBlocksHealthStatuses", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoCoreServiceWatchBlocksHealthStatusesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoCoreService_WatchBlocksHealthStatusesClient interface {
	Recv() (*BlockStatuses, error)
	grpc.ClientStream
}

type kintoCoreServiceWatchBlocksHealthStatusesClient struct {
	grpc.ClientStream
}

func (x *kintoCoreServiceWatchBlocksHealthStatusesClient) Recv() (*BlockStatuses, error) {
	m := new(BlockStatuses)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoCoreServiceClient) WatchJobsStatus(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoCoreService_WatchJobsStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoCoreService_serviceDesc.Streams[3], "/KintoCoreService/WatchJobsStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoCoreServiceWatchJobsStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoCoreService_WatchJobsStatusClient interface {
	Recv() (*JobStatus, error)
	grpc.ClientStream
}

type kintoCoreServiceWatchJobsStatusClient struct {
	grpc.ClientStream
}

func (x *kintoCoreServiceWatchJobsStatusClient) Recv() (*JobStatus, error) {
	m := new(JobStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoCoreServiceClient) WatchBlocksMetrics(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoCoreService_WatchBlocksMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoCoreService_serviceDesc.Streams[4], "/KintoCoreService/WatchBlocksMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoCoreServiceWatchBlocksMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoCoreService_WatchBlocksMetricsClient interface {
	Recv() (*BlocksMetrics, error)
	grpc.ClientStream
}

type kintoCoreServiceWatchBlocksMetricsClient struct {
	grpc.ClientStream
}

func (x *kintoCoreServiceWatchBlocksMetricsClient) Recv() (*BlocksMetrics, error) {
	m := new(BlocksMetrics)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoCoreServiceClient) WatchConsoleLogs(ctx context.Context, in *WatchConsoleLogsRequest, opts ...grpc.CallOption) (KintoCoreService_WatchConsoleLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoCoreService_serviceDesc.Streams[5], "/KintoCoreService/WatchConsoleLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoCoreServiceWatchConsoleLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoCoreService_WatchConsoleLogsClient interface {
	Recv() (*ConsoleLog, error)
	grpc.ClientStream
}

type kintoCoreServiceWatchConsoleLogsClient struct {
	grpc.ClientStream
}

func (x *kintoCoreServiceWatchConsoleLogsClient) Recv() (*ConsoleLog, error) {
	m := new(ConsoleLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoCoreServiceClient) GetKintoConfiguration(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*KintoConfiguration, error) {
	out := new(KintoConfiguration)
	err := c.cc.Invoke(ctx, "/KintoCoreService/GetKintoConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) CreateCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoCoreService/CreateCustomDomainName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) DeleteCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoCoreService/DeleteCustomDomainName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) CheckCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*CheckCustomDomainNameResponse, error) {
	out := new(CheckCustomDomainNameResponse)
	err := c.cc.Invoke(ctx, "/KintoCoreService/CheckCustomDomainName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) EnablePublicURL(ctx context.Context, in *EnablePublicURLRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoCoreService/EnablePublicURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) DisablePublicURL(ctx context.Context, in *DisablePublicURLRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoCoreService/DisablePublicURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoCoreServiceClient) StartTeleport(ctx context.Context, in *TeleportRequest, opts ...grpc.CallOption) (KintoCoreService_StartTeleportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoCoreService_serviceDesc.Streams[6], "/KintoCoreService/StartTeleport", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoCoreServiceStartTeleportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoCoreService_StartTeleportClient interface {
	Recv() (*TeleportResponse, error)
	grpc.ClientStream
}

type kintoCoreServiceStartTeleportClient struct {
	grpc.ClientStream
}

func (x *kintoCoreServiceStartTeleportClient) Recv() (*TeleportResponse, error) {
	m := new(TeleportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoCoreServiceClient) SyncTime(ctx context.Context, in *SyncTimeRequest, opts ...grpc.CallOption) (*SyncTimeResponse, error) {
	out := new(SyncTimeResponse)
	err := c.cc.Invoke(ctx, "/KintoCoreService/SyncTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KintoCoreServiceServer is the server API for KintoCoreService service.
type KintoCoreServiceServer interface {
	GetEnvironment(context.Context, *EnvironmentQueryRequest) (*Environment, error)
	GetEnvironments(context.Context, *empty.Empty) (*Environments, error)
	CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*Environment, error)
	UpdateEnvironment(context.Context, *UpdateEnvironmentRequest) (*Environment, error)
	DeleteEnvironment(context.Context, *DeleteEnvironmentRequest) (*empty.Empty, error)
	CreateBlock(context.Context, *CreateBlockRequest) (*BlockUpdateResponse, error)
	DeployBlockUpdate(context.Context, *DeployBlockRequest) (*BlockUpdateResponse, error)
	TriggerDeploy(context.Context, *TriggerDeployRequest) (*BlockUpdateResponse, error)
	RollbackBlock(context.Context, *RollbackBlockRequest) (*BlockUpdateResponse, error)
	GetBlocks(context.Context, *BlockQueryRequest) (*Blocks, error)
	GetBlock(context.Context, *BlockQueryRequest) (*Block, error)
	DeleteBlock(context.Context, *DeleteBlockRequest) (*empty.Empty, error)
	SuspendBlock(context.Context, *SuspendBlockRequest) (*BlockUpdateResponse, error)
	WatchReleasesStatus(*BlockQueryRequest, KintoCoreService_WatchReleasesStatusServer) error
	KillBlockInstance(context.Context, *KillBlockInstanceRequest) (*empty.Empty, error)
	AbortRelease(context.Context, *AbortBlockReleaseRequest) (*empty.Empty, error)
	TagRelease(context.Context, *TagReleaseRequest) (*empty.Empty, error)
	PromoteRelease(context.Context, *PromoteReleaseRequest) (*empty.Empty, error)
	GenReleaseConfigFromKintoFile(context.Context, *GenReleaseConfigFromKintoFileRepoRequest) (*ReleaseConfig, error)
	WatchBuildLogs(*WatchBuildLogsRequest, KintoCoreService_WatchBuildLogsServer) error
	UpdateBuildStatus(context.Context, *UpdateBuildStatusRequest) (*UpdateBuildStatusResponse, error)
	UpdateBuildCommitSha(context.Context, *UpdateBuildCommitShaRequest) (*empty.Empty, error)
	WatchBlocksHealthStatuses(*EnvironmentQueryRequest, KintoCoreService_WatchBlocksHealthStatusesServer) error
	WatchJobsStatus(*BlockQueryRequest, KintoCoreService_WatchJobsStatusServer) error
	WatchBlocksMetrics(*BlockQueryRequest, KintoCoreService_WatchBlocksMetricsServer) error
	WatchConsoleLogs(*WatchConsoleLogsRequest, KintoCoreService_WatchConsoleLogsServer) error
	GetKintoConfiguration(context.Context, *empty.Empty) (*KintoConfiguration, error)
	CreateCustomDomainName(context.Context, *CustomDomainNameRequest) (*empty.Empty, error)
	DeleteCustomDomainName(context.Context, *CustomDomainNameRequest) (*empty.Empty, error)
	CheckCustomDomainName(context.Context, *CustomDomainNameRequest) (*CheckCustomDomainNameResponse, error)
	EnablePublicURL(context.Context, *EnablePublicURLRequest) (*empty.Empty, error)
	DisablePublicURL(context.Context, *DisablePublicURLRequest) (*empty.Empty, error)
	StartTeleport(*TeleportRequest, KintoCoreService_StartTeleportServer) error
	SyncTime(context.Context, *SyncTimeRequest) (*SyncTimeResponse, error)
}

// UnimplementedKintoCoreServiceServer can be embedded to have forward compatible implementations.
type UnimplementedKintoCoreServiceServer struct {
}

func (*UnimplementedKintoCoreServiceServer) GetEnvironment(ctx context.Context, req *EnvironmentQueryRequest) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironment not implemented")
}
func (*UnimplementedKintoCoreServiceServer) GetEnvironments(ctx context.Context, req *empty.Empty) (*Environments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironments not implemented")
}
func (*UnimplementedKintoCoreServiceServer) CreateEnvironment(ctx context.Context, req *CreateEnvironmentRequest) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (*UnimplementedKintoCoreServiceServer) UpdateEnvironment(ctx context.Context, req *UpdateEnvironmentRequest) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvironment not implemented")
}
func (*UnimplementedKintoCoreServiceServer) DeleteEnvironment(ctx context.Context, req *DeleteEnvironmentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvironment not implemented")
}
func (*UnimplementedKintoCoreServiceServer) CreateBlock(ctx context.Context, req *CreateBlockRequest) (*BlockUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlock not implemented")
}
func (*UnimplementedKintoCoreServiceServer) DeployBlockUpdate(ctx context.Context, req *DeployBlockRequest) (*BlockUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployBlockUpdate not implemented")
}
func (*UnimplementedKintoCoreServiceServer) TriggerDeploy(ctx context.Context, req *TriggerDeployRequest) (*BlockUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerDeploy not implemented")
}
func (*UnimplementedKintoCoreServiceServer) RollbackBlock(ctx context.Context, req *RollbackBlockRequest) (*BlockUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackBlock not implemented")
}
func (*UnimplementedKintoCoreServiceServer) GetBlocks(ctx context.Context, req *BlockQueryRequest) (*Blocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (*UnimplementedKintoCoreServiceServer) GetBlock(ctx context.Context, req *BlockQueryRequest) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedKintoCoreServiceServer) DeleteBlock(ctx context.Context, req *DeleteBlockRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlock not implemented")
}
func (*UnimplementedKintoCoreServiceServer) SuspendBlock(ctx context.Context, req *SuspendBlockRequest) (*BlockUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendBlock not implemented")
}
func (*UnimplementedKintoCoreServiceServer) WatchReleasesStatus(req *BlockQueryRequest, srv KintoCoreService_WatchReleasesStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchReleasesStatus not implemented")
}
func (*UnimplementedKintoCoreServiceServer) KillBlockInstance(ctx context.Context, req *KillBlockInstanceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillBlockInstance not implemented")
}
func (*UnimplementedKintoCoreServiceServer) AbortRelease(ctx context.Context, req *AbortBlockReleaseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortRelease not implemented")
}
func (*UnimplementedKintoCoreServiceServer) TagRelease(ctx context.Context, req *TagReleaseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagRelease not implemented")
}
func (*UnimplementedKintoCoreServiceServer) PromoteRelease(ctx context.Context, req *PromoteReleaseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteRelease not implemented")
}
func (*UnimplementedKintoCoreServiceServer) GenReleaseConfigFromKintoFile(ctx context.Context, req *GenReleaseConfigFromKintoFileRepoRequest) (*ReleaseConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenReleaseConfigFromKintoFile not implemented")
}
func (*UnimplementedKintoCoreServiceServer) WatchBuildLogs(req *WatchBuildLogsRequest, srv KintoCoreService_WatchBuildLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBuildLogs not implemented")
}
func (*UnimplementedKintoCoreServiceServer) UpdateBuildStatus(ctx context.Context, req *UpdateBuildStatusRequest) (*UpdateBuildStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuildStatus not implemented")
}
func (*UnimplementedKintoCoreServiceServer) UpdateBuildCommitSha(ctx context.Context, req *UpdateBuildCommitShaRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuildCommitSha not implemented")
}
func (*UnimplementedKintoCoreServiceServer) WatchBlocksHealthStatuses(req *EnvironmentQueryRequest, srv KintoCoreService_WatchBlocksHealthStatusesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBlocksHealthStatuses not implemented")
}
func (*UnimplementedKintoCoreServiceServer) WatchJobsStatus(req *BlockQueryRequest, srv KintoCoreService_WatchJobsStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchJobsStatus not implemented")
}
func (*UnimplementedKintoCoreServiceServer) WatchBlocksMetrics(req *BlockQueryRequest, srv KintoCoreService_WatchBlocksMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBlocksMetrics not implemented")
}
func (*UnimplementedKintoCoreServiceServer) WatchConsoleLogs(req *WatchConsoleLogsRequest, srv KintoCoreService_WatchConsoleLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchConsoleLogs not implemented")
}
func (*UnimplementedKintoCoreServiceServer) GetKintoConfiguration(ctx context.Context, req *empty.Empty) (*KintoConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKintoConfiguration not implemented")
}
func (*UnimplementedKintoCoreServiceServer) CreateCustomDomainName(ctx context.Context, req *CustomDomainNameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomDomainName not implemented")
}
func (*UnimplementedKintoCoreServiceServer) DeleteCustomDomainName(ctx context.Context, req *CustomDomainNameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomDomainName not implemented")
}
func (*UnimplementedKintoCoreServiceServer) CheckCustomDomainName(ctx context.Context, req *CustomDomainNameRequest) (*CheckCustomDomainNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCustomDomainName not implemented")
}
func (*UnimplementedKintoCoreServiceServer) EnablePublicURL(ctx context.Context, req *EnablePublicURLRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePublicURL not implemented")
}
func (*UnimplementedKintoCoreServiceServer) DisablePublicURL(ctx context.Context, req *DisablePublicURLRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePublicURL not implemented")
}
func (*UnimplementedKintoCoreServiceServer) StartTeleport(req *TeleportRequest, srv KintoCoreService_StartTeleportServer) error {
	return status.Errorf(codes.Unimplemented, "method StartTeleport not implemented")
}
func (*UnimplementedKintoCoreServiceServer) SyncTime(ctx context.Context, req *SyncTimeRequest) (*SyncTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncTime not implemented")
}

func RegisterKintoCoreServiceServer(s *grpc.Server, srv KintoCoreServiceServer) {
	s.RegisterService(&_KintoCoreService_serviceDesc, srv)
}

func _KintoCoreService_GetEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).GetEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/GetEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).GetEnvironment(ctx, req.(*EnvironmentQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_GetEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).GetEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/GetEnvironments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).GetEnvironments(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/CreateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).CreateEnvironment(ctx, req.(*CreateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_UpdateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).UpdateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/UpdateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).UpdateEnvironment(ctx, req.(*UpdateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_DeleteEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).DeleteEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/DeleteEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).DeleteEnvironment(ctx, req.(*DeleteEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_CreateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).CreateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/CreateBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).CreateBlock(ctx, req.(*CreateBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_DeployBlockUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).DeployBlockUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/DeployBlockUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).DeployBlockUpdate(ctx, req.(*DeployBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_TriggerDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).TriggerDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/TriggerDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).TriggerDeploy(ctx, req.(*TriggerDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_RollbackBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).RollbackBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/RollbackBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).RollbackBlock(ctx, req.(*RollbackBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).GetBlocks(ctx, req.(*BlockQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).GetBlock(ctx, req.(*BlockQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_DeleteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).DeleteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/DeleteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).DeleteBlock(ctx, req.(*DeleteBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_SuspendBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).SuspendBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/SuspendBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).SuspendBlock(ctx, req.(*SuspendBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_WatchReleasesStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoCoreServiceServer).WatchReleasesStatus(m, &kintoCoreServiceWatchReleasesStatusServer{stream})
}

type KintoCoreService_WatchReleasesStatusServer interface {
	Send(*ReleasesStatus) error
	grpc.ServerStream
}

type kintoCoreServiceWatchReleasesStatusServer struct {
	grpc.ServerStream
}

func (x *kintoCoreServiceWatchReleasesStatusServer) Send(m *ReleasesStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoCoreService_KillBlockInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillBlockInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).KillBlockInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/KillBlockInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).KillBlockInstance(ctx, req.(*KillBlockInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_AbortRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortBlockReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).AbortRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/AbortRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).AbortRelease(ctx, req.(*AbortBlockReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_TagRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).TagRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/TagRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).TagRelease(ctx, req.(*TagReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_PromoteRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).PromoteRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/PromoteRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).PromoteRelease(ctx, req.(*PromoteReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_GenReleaseConfigFromKintoFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenReleaseConfigFromKintoFileRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).GenReleaseConfigFromKintoFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/GenReleaseConfigFromKintoFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).GenReleaseConfigFromKintoFile(ctx, req.(*GenReleaseConfigFromKintoFileRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_WatchBuildLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchBuildLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoCoreServiceServer).WatchBuildLogs(m, &kintoCoreServiceWatchBuildLogsServer{stream})
}

type KintoCoreService_WatchBuildLogsServer interface {
	Send(*Logs) error
	grpc.ServerStream
}

type kintoCoreServiceWatchBuildLogsServer struct {
	grpc.ServerStream
}

func (x *kintoCoreServiceWatchBuildLogsServer) Send(m *Logs) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoCoreService_UpdateBuildStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuildStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).UpdateBuildStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/UpdateBuildStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).UpdateBuildStatus(ctx, req.(*UpdateBuildStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_UpdateBuildCommitSha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuildCommitShaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).UpdateBuildCommitSha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/UpdateBuildCommitSha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).UpdateBuildCommitSha(ctx, req.(*UpdateBuildCommitShaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_WatchBlocksHealthStatuses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EnvironmentQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoCoreServiceServer).WatchBlocksHealthStatuses(m, &kintoCoreServiceWatchBlocksHealthStatusesServer{stream})
}

type KintoCoreService_WatchBlocksHealthStatusesServer interface {
	Send(*BlockStatuses) error
	grpc.ServerStream
}

type kintoCoreServiceWatchBlocksHealthStatusesServer struct {
	grpc.ServerStream
}

func (x *kintoCoreServiceWatchBlocksHealthStatusesServer) Send(m *BlockStatuses) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoCoreService_WatchJobsStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoCoreServiceServer).WatchJobsStatus(m, &kintoCoreServiceWatchJobsStatusServer{stream})
}

type KintoCoreService_WatchJobsStatusServer interface {
	Send(*JobStatus) error
	grpc.ServerStream
}

type kintoCoreServiceWatchJobsStatusServer struct {
	grpc.ServerStream
}

func (x *kintoCoreServiceWatchJobsStatusServer) Send(m *JobStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoCoreService_WatchBlocksMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoCoreServiceServer).WatchBlocksMetrics(m, &kintoCoreServiceWatchBlocksMetricsServer{stream})
}

type KintoCoreService_WatchBlocksMetricsServer interface {
	Send(*BlocksMetrics) error
	grpc.ServerStream
}

type kintoCoreServiceWatchBlocksMetricsServer struct {
	grpc.ServerStream
}

func (x *kintoCoreServiceWatchBlocksMetricsServer) Send(m *BlocksMetrics) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoCoreService_WatchConsoleLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchConsoleLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoCoreServiceServer).WatchConsoleLogs(m, &kintoCoreServiceWatchConsoleLogsServer{stream})
}

type KintoCoreService_WatchConsoleLogsServer interface {
	Send(*ConsoleLog) error
	grpc.ServerStream
}

type kintoCoreServiceWatchConsoleLogsServer struct {
	grpc.ServerStream
}

func (x *kintoCoreServiceWatchConsoleLogsServer) Send(m *ConsoleLog) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoCoreService_GetKintoConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).GetKintoConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/GetKintoConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).GetKintoConfiguration(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_CreateCustomDomainName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomDomainNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).CreateCustomDomainName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/CreateCustomDomainName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).CreateCustomDomainName(ctx, req.(*CustomDomainNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_DeleteCustomDomainName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomDomainNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).DeleteCustomDomainName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/DeleteCustomDomainName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).DeleteCustomDomainName(ctx, req.(*CustomDomainNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_CheckCustomDomainName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomDomainNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).CheckCustomDomainName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/CheckCustomDomainName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).CheckCustomDomainName(ctx, req.(*CustomDomainNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_EnablePublicURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePublicURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).EnablePublicURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/EnablePublicURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).EnablePublicURL(ctx, req.(*EnablePublicURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_DisablePublicURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePublicURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).DisablePublicURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/DisablePublicURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).DisablePublicURL(ctx, req.(*DisablePublicURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoCoreService_StartTeleport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TeleportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoCoreServiceServer).StartTeleport(m, &kintoCoreServiceStartTeleportServer{stream})
}

type KintoCoreService_StartTeleportServer interface {
	Send(*TeleportResponse) error
	grpc.ServerStream
}

type kintoCoreServiceStartTeleportServer struct {
	grpc.ServerStream
}

func (x *kintoCoreServiceStartTeleportServer) Send(m *TeleportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoCoreService_SyncTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoCoreServiceServer).SyncTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoCoreService/SyncTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoCoreServiceServer).SyncTime(ctx, req.(*SyncTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KintoCoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "KintoCoreService",
	HandlerType: (*KintoCoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnvironment",
			Handler:    _KintoCoreService_GetEnvironment_Handler,
		},
		{
			MethodName: "GetEnvironments",
			Handler:    _KintoCoreService_GetEnvironments_Handler,
		},
		{
			MethodName: "CreateEnvironment",
			Handler:    _KintoCoreService_CreateEnvironment_Handler,
		},
		{
			MethodName: "UpdateEnvironment",
			Handler:    _KintoCoreService_UpdateEnvironment_Handler,
		},
		{
			MethodName: "DeleteEnvironment",
			Handler:    _KintoCoreService_DeleteEnvironment_Handler,
		},
		{
			MethodName: "CreateBlock",
			Handler:    _KintoCoreService_CreateBlock_Handler,
		},
		{
			MethodName: "DeployBlockUpdate",
			Handler:    _KintoCoreService_DeployBlockUpdate_Handler,
		},
		{
			MethodName: "TriggerDeploy",
			Handler:    _KintoCoreService_TriggerDeploy_Handler,
		},
		{
			MethodName: "RollbackBlock",
			Handler:    _KintoCoreService_RollbackBlock_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _KintoCoreService_GetBlocks_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _KintoCoreService_GetBlock_Handler,
		},
		{
			MethodName: "DeleteBlock",
			Handler:    _KintoCoreService_DeleteBlock_Handler,
		},
		{
			MethodName: "SuspendBlock",
			Handler:    _KintoCoreService_SuspendBlock_Handler,
		},
		{
			MethodName: "KillBlockInstance",
			Handler:    _KintoCoreService_KillBlockInstance_Handler,
		},
		{
			MethodName: "AbortRelease",
			Handler:    _KintoCoreService_AbortRelease_Handler,
		},
		{
			MethodName: "TagRelease",
			Handler:    _KintoCoreService_TagRelease_Handler,
		},
		{
			MethodName: "PromoteRelease",
			Handler:    _KintoCoreService_PromoteRelease_Handler,
		},
		{
			MethodName: "GenReleaseConfigFromKintoFile",
			Handler:    _KintoCoreService_GenReleaseConfigFromKintoFile_Handler,
		},
		{
			MethodName: "UpdateBuildStatus",
			Handler:    _KintoCoreService_UpdateBuildStatus_Handler,
		},
		{
			MethodName: "UpdateBuildCommitSha",
			Handler:    _KintoCoreService_UpdateBuildCommitSha_Handler,
		},
		{
			MethodName: "GetKintoConfiguration",
			Handler:    _KintoCoreService_GetKintoConfiguration_Handler,
		},
		{
			MethodName: "CreateCustomDomainName",
			Handler:    _KintoCoreService_CreateCustomDomainName_Handler,
		},
		{
			MethodName: "DeleteCustomDomainName",
			Handler:    _KintoCoreService_DeleteCustomDomainName_Handler,
		},
		{
			MethodName: "CheckCustomDomainName",
			Handler:    _KintoCoreService_CheckCustomDomainName_Handler,
		},
		{
			MethodName: "EnablePublicURL",
			Handler:    _KintoCoreService_EnablePublicURL_Handler,
		},
		{
			MethodName: "DisablePublicURL",
			Handler:    _KintoCoreService_DisablePublicURL_Handler,
		},
		{
			MethodName: "SyncTime",
			Handler:    _KintoCoreService_SyncTime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchReleasesStatus",
			Handler:       _KintoCoreService_WatchReleasesStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchBuildLogs",
			Handler:       _KintoCoreService_WatchBuildLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchBlocksHealthStatuses",
			Handler:       _KintoCoreService_WatchBlocksHealthStatuses_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchJobsStatus",
			Handler:       _KintoCoreService_WatchJobsStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchBlocksMetrics",
			Handler:       _KintoCoreService_WatchBlocksMetrics_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchConsoleLogs",
			Handler:       _KintoCoreService_WatchConsoleLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartTeleport",
			Handler:       _KintoCoreService_StartTeleport_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "coreapi.proto",
}
