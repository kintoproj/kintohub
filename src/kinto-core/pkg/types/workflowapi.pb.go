// Code generated by protoc-gen-go. DO NOT EDIT.
// source: workflowapi.proto

package types

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowLogsRequest struct {
	BuildId              string   `protobuf:"bytes,1,opt,name=buildId,proto3" json:"buildId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowLogsRequest) Reset()         { *m = WorkflowLogsRequest{} }
func (m *WorkflowLogsRequest) String() string { return proto.CompactTextString(m) }
func (*WorkflowLogsRequest) ProtoMessage()    {}
func (*WorkflowLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f33063af257562f, []int{0}
}

func (m *WorkflowLogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowLogsRequest.Unmarshal(m, b)
}
func (m *WorkflowLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowLogsRequest.Marshal(b, m, deterministic)
}
func (m *WorkflowLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowLogsRequest.Merge(m, src)
}
func (m *WorkflowLogsRequest) XXX_Size() int {
	return xxx_messageInfo_WorkflowLogsRequest.Size(m)
}
func (m *WorkflowLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowLogsRequest proto.InternalMessageInfo

func (m *WorkflowLogsRequest) GetBuildId() string {
	if m != nil {
		return m.BuildId
	}
	return ""
}

type BuildAndDeployRequest struct {
	BuildConfig          *BuildConfig `protobuf:"bytes,1,opt,name=buildConfig,proto3" json:"buildConfig,omitempty"`
	BlockName            string       `protobuf:"bytes,2,opt,name=blockName,proto3" json:"blockName,omitempty"`
	ReleaseId            string       `protobuf:"bytes,3,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	Namespace            string       `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	IsStaticBuild        bool         `protobuf:"varint,5,opt,name=isStaticBuild,proto3" json:"isStaticBuild,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BuildAndDeployRequest) Reset()         { *m = BuildAndDeployRequest{} }
func (m *BuildAndDeployRequest) String() string { return proto.CompactTextString(m) }
func (*BuildAndDeployRequest) ProtoMessage()    {}
func (*BuildAndDeployRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f33063af257562f, []int{1}
}

func (m *BuildAndDeployRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildAndDeployRequest.Unmarshal(m, b)
}
func (m *BuildAndDeployRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildAndDeployRequest.Marshal(b, m, deterministic)
}
func (m *BuildAndDeployRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildAndDeployRequest.Merge(m, src)
}
func (m *BuildAndDeployRequest) XXX_Size() int {
	return xxx_messageInfo_BuildAndDeployRequest.Size(m)
}
func (m *BuildAndDeployRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildAndDeployRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BuildAndDeployRequest proto.InternalMessageInfo

func (m *BuildAndDeployRequest) GetBuildConfig() *BuildConfig {
	if m != nil {
		return m.BuildConfig
	}
	return nil
}

func (m *BuildAndDeployRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *BuildAndDeployRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *BuildAndDeployRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *BuildAndDeployRequest) GetIsStaticBuild() bool {
	if m != nil {
		return m.IsStaticBuild
	}
	return false
}

type DeployRequest struct {
	BlockName            string   `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	ReleaseId            string   `protobuf:"bytes,2,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	Namespace            string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeployRequest) Reset()         { *m = DeployRequest{} }
func (m *DeployRequest) String() string { return proto.CompactTextString(m) }
func (*DeployRequest) ProtoMessage()    {}
func (*DeployRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f33063af257562f, []int{2}
}

func (m *DeployRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployRequest.Unmarshal(m, b)
}
func (m *DeployRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployRequest.Marshal(b, m, deterministic)
}
func (m *DeployRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployRequest.Merge(m, src)
}
func (m *DeployRequest) XXX_Size() int {
	return xxx_messageInfo_DeployRequest.Size(m)
}
func (m *DeployRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeployRequest proto.InternalMessageInfo

func (m *DeployRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *DeployRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *DeployRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type DeployCatalogRequest struct {
	BlockName            string      `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	ReleaseId            string      `protobuf:"bytes,2,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	Namespace            string      `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Repo                 *Repository `protobuf:"bytes,4,opt,name=repo,proto3" json:"repo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DeployCatalogRequest) Reset()         { *m = DeployCatalogRequest{} }
func (m *DeployCatalogRequest) String() string { return proto.CompactTextString(m) }
func (*DeployCatalogRequest) ProtoMessage()    {}
func (*DeployCatalogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f33063af257562f, []int{3}
}

func (m *DeployCatalogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployCatalogRequest.Unmarshal(m, b)
}
func (m *DeployCatalogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployCatalogRequest.Marshal(b, m, deterministic)
}
func (m *DeployCatalogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployCatalogRequest.Merge(m, src)
}
func (m *DeployCatalogRequest) XXX_Size() int {
	return xxx_messageInfo_DeployCatalogRequest.Size(m)
}
func (m *DeployCatalogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployCatalogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeployCatalogRequest proto.InternalMessageInfo

func (m *DeployCatalogRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *DeployCatalogRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *DeployCatalogRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeployCatalogRequest) GetRepo() *Repository {
	if m != nil {
		return m.Repo
	}
	return nil
}

type UndeployRequest struct {
	BlockName            string   `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UndeployRequest) Reset()         { *m = UndeployRequest{} }
func (m *UndeployRequest) String() string { return proto.CompactTextString(m) }
func (*UndeployRequest) ProtoMessage()    {}
func (*UndeployRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f33063af257562f, []int{4}
}

func (m *UndeployRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UndeployRequest.Unmarshal(m, b)
}
func (m *UndeployRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UndeployRequest.Marshal(b, m, deterministic)
}
func (m *UndeployRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndeployRequest.Merge(m, src)
}
func (m *UndeployRequest) XXX_Size() int {
	return xxx_messageInfo_UndeployRequest.Size(m)
}
func (m *UndeployRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UndeployRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UndeployRequest proto.InternalMessageInfo

func (m *UndeployRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *UndeployRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type SuspendRequest struct {
	BlockName            string   `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ReleaseId            string   `protobuf:"bytes,3,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SuspendRequest) Reset()         { *m = SuspendRequest{} }
func (m *SuspendRequest) String() string { return proto.CompactTextString(m) }
func (*SuspendRequest) ProtoMessage()    {}
func (*SuspendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f33063af257562f, []int{5}
}

func (m *SuspendRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SuspendRequest.Unmarshal(m, b)
}
func (m *SuspendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SuspendRequest.Marshal(b, m, deterministic)
}
func (m *SuspendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuspendRequest.Merge(m, src)
}
func (m *SuspendRequest) XXX_Size() int {
	return xxx_messageInfo_SuspendRequest.Size(m)
}
func (m *SuspendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SuspendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SuspendRequest proto.InternalMessageInfo

func (m *SuspendRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *SuspendRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SuspendRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type WorkflowResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowResponse) Reset()         { *m = WorkflowResponse{} }
func (m *WorkflowResponse) String() string { return proto.CompactTextString(m) }
func (*WorkflowResponse) ProtoMessage()    {}
func (*WorkflowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f33063af257562f, []int{6}
}

func (m *WorkflowResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowResponse.Unmarshal(m, b)
}
func (m *WorkflowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowResponse.Marshal(b, m, deterministic)
}
func (m *WorkflowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowResponse.Merge(m, src)
}
func (m *WorkflowResponse) XXX_Size() int {
	return xxx_messageInfo_WorkflowResponse.Size(m)
}
func (m *WorkflowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowResponse proto.InternalMessageInfo

func (m *WorkflowResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AbortReleaseRequest struct {
	BuildId              string   `protobuf:"bytes,1,opt,name=buildId,proto3" json:"buildId,omitempty"`
	EnvId                string   `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbortReleaseRequest) Reset()         { *m = AbortReleaseRequest{} }
func (m *AbortReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*AbortReleaseRequest) ProtoMessage()    {}
func (*AbortReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f33063af257562f, []int{7}
}

func (m *AbortReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbortReleaseRequest.Unmarshal(m, b)
}
func (m *AbortReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbortReleaseRequest.Marshal(b, m, deterministic)
}
func (m *AbortReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbortReleaseRequest.Merge(m, src)
}
func (m *AbortReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_AbortReleaseRequest.Size(m)
}
func (m *AbortReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AbortReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AbortReleaseRequest proto.InternalMessageInfo

func (m *AbortReleaseRequest) GetBuildId() string {
	if m != nil {
		return m.BuildId
	}
	return ""
}

func (m *AbortReleaseRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func init() {
	proto.RegisterType((*WorkflowLogsRequest)(nil), "WorkflowLogsRequest")
	proto.RegisterType((*BuildAndDeployRequest)(nil), "BuildAndDeployRequest")
	proto.RegisterType((*DeployRequest)(nil), "DeployRequest")
	proto.RegisterType((*DeployCatalogRequest)(nil), "DeployCatalogRequest")
	proto.RegisterType((*UndeployRequest)(nil), "UndeployRequest")
	proto.RegisterType((*SuspendRequest)(nil), "SuspendRequest")
	proto.RegisterType((*WorkflowResponse)(nil), "WorkflowResponse")
	proto.RegisterType((*AbortReleaseRequest)(nil), "AbortReleaseRequest")
}

func init() {
	proto.RegisterFile("workflowapi.proto", fileDescriptor_2f33063af257562f)
}

var fileDescriptor_2f33063af257562f = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0xd3, 0x06, 0xe8, 0x26, 0x4d, 0x9a, 0x6d, 0x5a, 0x59, 0x01, 0x89, 0xca, 0xe2, 0xa1,
	0x08, 0xb1, 0xae, 0x02, 0x42, 0x3c, 0x21, 0x25, 0xbd, 0xa0, 0x48, 0x80, 0x90, 0x23, 0x54, 0x89,
	0x37, 0x5f, 0x26, 0xee, 0x36, 0xb6, 0x67, 0xf1, 0x6e, 0x5a, 0xe5, 0x33, 0xf8, 0x2a, 0xfe, 0x87,
	0x2f, 0x40, 0xf1, 0xc6, 0x49, 0x1c, 0xac, 0x40, 0x25, 0x78, 0xf3, 0xcc, 0xf8, 0xec, 0x39, 0x3b,
	0x73, 0x76, 0x48, 0xeb, 0x0e, 0xd3, 0xf1, 0x28, 0xc2, 0x3b, 0x57, 0x70, 0x26, 0x52, 0x54, 0xd8,
	0xa9, 0xc7, 0x18, 0x40, 0x24, 0xe7, 0xd1, 0xe3, 0x10, 0x31, 0x8c, 0xc0, 0xce, 0x22, 0x6f, 0x32,
	0xb2, 0x21, 0x16, 0x6a, 0xaa, 0x8b, 0x96, 0x4d, 0x0e, 0xae, 0xe6, 0xf8, 0x0f, 0x18, 0x4a, 0x07,
	0xbe, 0x4d, 0x40, 0x2a, 0x6a, 0x92, 0x87, 0xde, 0x84, 0x47, 0xc1, 0x20, 0x30, 0x8d, 0x63, 0xe3,
	0x64, 0xd7, 0xc9, 0x43, 0xeb, 0x87, 0x41, 0x0e, 0xfb, 0xb3, 0xef, 0x5e, 0x12, 0x9c, 0x83, 0x88,
	0x70, 0x9a, 0x63, 0x18, 0xa9, 0x65, 0x3f, 0x9d, 0x61, 0x32, 0xe2, 0x61, 0x86, 0xab, 0x75, 0xeb,
	0xac, 0xbf, 0xcc, 0x39, 0xab, 0x3f, 0xd0, 0x27, 0x64, 0xd7, 0x8b, 0xd0, 0x1f, 0x7f, 0x72, 0x63,
	0x30, 0x2b, 0x19, 0xcb, 0x32, 0x31, 0xab, 0xa6, 0x10, 0x81, 0x2b, 0x61, 0x10, 0x98, 0xdb, 0xba,
	0xba, 0x48, 0xcc, 0xaa, 0x89, 0x1b, 0x83, 0x14, 0xae, 0x0f, 0xe6, 0x8e, 0xae, 0x2e, 0x12, 0xf4,
	0x19, 0xd9, 0xe3, 0x72, 0xa8, 0x5c, 0xc5, 0xfd, 0x8c, 0xdd, 0xac, 0x1e, 0x1b, 0x27, 0x8f, 0x9c,
	0x62, 0xd2, 0xe2, 0x64, 0xaf, 0x78, 0x81, 0x82, 0x20, 0x63, 0xa3, 0xa0, 0xca, 0x46, 0x41, 0xdb,
	0x6b, 0x82, 0xac, 0xef, 0x06, 0x69, 0x6b, 0xae, 0x33, 0x57, 0xb9, 0x11, 0x86, 0xff, 0x9d, 0x92,
	0x3e, 0x25, 0x3b, 0x29, 0x08, 0xcc, 0x9a, 0x53, 0xeb, 0xd6, 0x98, 0x03, 0x02, 0x25, 0x57, 0x98,
	0x4e, 0x9d, 0xac, 0x60, 0x7d, 0x24, 0xcd, 0x2f, 0x49, 0x70, 0xbf, 0x06, 0x2c, 0xf9, 0x2a, 0xeb,
	0x57, 0xbc, 0x21, 0x8d, 0xe1, 0x44, 0x0a, 0x48, 0x82, 0x7f, 0x70, 0xda, 0xe6, 0xe9, 0x5b, 0x16,
	0xd9, 0xcf, 0x4d, 0xeb, 0x80, 0x14, 0x98, 0x48, 0xa0, 0x0d, 0x52, 0xe1, 0xb9, 0x59, 0x2b, 0x3c,
	0xb0, 0x2e, 0xc8, 0x41, 0xcf, 0xc3, 0x54, 0x39, 0x1a, 0xf5, 0x47, 0x63, 0xd3, 0x36, 0xa9, 0x42,
	0x72, 0xbb, 0x68, 0xb4, 0x0e, 0xba, 0x3f, 0xb7, 0x09, 0xcd, 0xb9, 0x7a, 0x9f, 0x07, 0x43, 0x48,
	0x6f, 0xb9, 0x0f, 0xf4, 0xfc, 0xf7, 0x47, 0x90, 0xd1, 0xd0, 0x23, 0x56, 0xfa, 0x38, 0x3a, 0x2d,
	0xb6, 0xae, 0xd8, 0xda, 0xa2, 0xaf, 0x97, 0x0e, 0xd4, 0xe8, 0x06, 0xfb, 0x0b, 0xd4, 0x25, 0x31,
	0x0b, 0xa8, 0xcb, 0x14, 0xe3, 0xb9, 0xad, 0xe8, 0x21, 0x2b, 0xb3, 0x59, 0xf9, 0x39, 0x6f, 0x57,
	0x0d, 0xa0, 0xf9, 0xf7, 0xd9, 0x9a, 0x25, 0xca, 0x91, 0x6f, 0x56, 0x66, 0xad, 0x81, 0x4d, 0x56,
	0x1c, 0x7e, 0x39, 0xee, 0x1d, 0xa9, 0xaf, 0xce, 0x84, 0xb6, 0x59, 0xc9, 0x88, 0x3a, 0x47, 0x4c,
	0x2f, 0x2c, 0x96, 0x2f, 0x2c, 0x76, 0x31, 0x5b, 0x58, 0xd6, 0x16, 0x3d, 0x25, 0xcd, 0xf7, 0xa0,
	0x56, 0xf7, 0x15, 0x6d, 0xb3, 0x92, 0xf5, 0xd5, 0xa9, 0xb2, 0x59, 0x94, 0x75, 0xb8, 0x75, 0xe5,
	0x2a, 0xff, 0xfa, 0x1e, 0x98, 0x53, 0xa3, 0xff, 0xe2, 0xeb, 0xf3, 0x90, 0xab, 0xeb, 0x89, 0xc7,
	0x7c, 0x8c, 0xed, 0x31, 0x4f, 0x14, 0x8a, 0x14, 0x6f, 0xf4, 0xd7, 0x4b, 0x1f, 0x53, 0xb0, 0xc5,
	0x38, 0xb4, 0xd5, 0x54, 0x80, 0xf4, 0x1e, 0x64, 0x32, 0x5f, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff,
	0x3c, 0x46, 0x9b, 0x0d, 0x88, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WorkflowAPIServiceClient is the client API for WorkflowAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkflowAPIServiceClient interface {
	BuildAndDeployRelease(ctx context.Context, in *BuildAndDeployRequest, opts ...grpc.CallOption) (*WorkflowResponse, error)
	DeployRelease(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*WorkflowResponse, error)
	DeployReleaseFromCatalog(ctx context.Context, in *DeployCatalogRequest, opts ...grpc.CallOption) (*WorkflowResponse, error)
	UndeployRelease(ctx context.Context, in *UndeployRequest, opts ...grpc.CallOption) (*WorkflowResponse, error)
	SuspendRelease(ctx context.Context, in *SuspendRequest, opts ...grpc.CallOption) (*WorkflowResponse, error)
	AbortRelease(ctx context.Context, in *AbortReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetWorkflowLogs(ctx context.Context, in *WorkflowLogsRequest, opts ...grpc.CallOption) (*Logs, error)
	WatchWorkflowLogs(ctx context.Context, in *WorkflowLogsRequest, opts ...grpc.CallOption) (WorkflowAPIService_WatchWorkflowLogsClient, error)
}

type workflowAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowAPIServiceClient(cc grpc.ClientConnInterface) WorkflowAPIServiceClient {
	return &workflowAPIServiceClient{cc}
}

func (c *workflowAPIServiceClient) BuildAndDeployRelease(ctx context.Context, in *BuildAndDeployRequest, opts ...grpc.CallOption) (*WorkflowResponse, error) {
	out := new(WorkflowResponse)
	err := c.cc.Invoke(ctx, "/WorkflowAPIService/BuildAndDeployRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIServiceClient) DeployRelease(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*WorkflowResponse, error) {
	out := new(WorkflowResponse)
	err := c.cc.Invoke(ctx, "/WorkflowAPIService/DeployRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIServiceClient) DeployReleaseFromCatalog(ctx context.Context, in *DeployCatalogRequest, opts ...grpc.CallOption) (*WorkflowResponse, error) {
	out := new(WorkflowResponse)
	err := c.cc.Invoke(ctx, "/WorkflowAPIService/DeployReleaseFromCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIServiceClient) UndeployRelease(ctx context.Context, in *UndeployRequest, opts ...grpc.CallOption) (*WorkflowResponse, error) {
	out := new(WorkflowResponse)
	err := c.cc.Invoke(ctx, "/WorkflowAPIService/UndeployRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIServiceClient) SuspendRelease(ctx context.Context, in *SuspendRequest, opts ...grpc.CallOption) (*WorkflowResponse, error) {
	out := new(WorkflowResponse)
	err := c.cc.Invoke(ctx, "/WorkflowAPIService/SuspendRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIServiceClient) AbortRelease(ctx context.Context, in *AbortReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/WorkflowAPIService/AbortRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIServiceClient) GetWorkflowLogs(ctx context.Context, in *WorkflowLogsRequest, opts ...grpc.CallOption) (*Logs, error) {
	out := new(Logs)
	err := c.cc.Invoke(ctx, "/WorkflowAPIService/GetWorkflowLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIServiceClient) WatchWorkflowLogs(ctx context.Context, in *WorkflowLogsRequest, opts ...grpc.CallOption) (WorkflowAPIService_WatchWorkflowLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WorkflowAPIService_serviceDesc.Streams[0], "/WorkflowAPIService/WatchWorkflowLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &workflowAPIServiceWatchWorkflowLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkflowAPIService_WatchWorkflowLogsClient interface {
	Recv() (*Logs, error)
	grpc.ClientStream
}

type workflowAPIServiceWatchWorkflowLogsClient struct {
	grpc.ClientStream
}

func (x *workflowAPIServiceWatchWorkflowLogsClient) Recv() (*Logs, error) {
	m := new(Logs)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkflowAPIServiceServer is the server API for WorkflowAPIService service.
type WorkflowAPIServiceServer interface {
	BuildAndDeployRelease(context.Context, *BuildAndDeployRequest) (*WorkflowResponse, error)
	DeployRelease(context.Context, *DeployRequest) (*WorkflowResponse, error)
	DeployReleaseFromCatalog(context.Context, *DeployCatalogRequest) (*WorkflowResponse, error)
	UndeployRelease(context.Context, *UndeployRequest) (*WorkflowResponse, error)
	SuspendRelease(context.Context, *SuspendRequest) (*WorkflowResponse, error)
	AbortRelease(context.Context, *AbortReleaseRequest) (*empty.Empty, error)
	GetWorkflowLogs(context.Context, *WorkflowLogsRequest) (*Logs, error)
	WatchWorkflowLogs(*WorkflowLogsRequest, WorkflowAPIService_WatchWorkflowLogsServer) error
}

// UnimplementedWorkflowAPIServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWorkflowAPIServiceServer struct {
}

func (*UnimplementedWorkflowAPIServiceServer) BuildAndDeployRelease(ctx context.Context, req *BuildAndDeployRequest) (*WorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildAndDeployRelease not implemented")
}
func (*UnimplementedWorkflowAPIServiceServer) DeployRelease(ctx context.Context, req *DeployRequest) (*WorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployRelease not implemented")
}
func (*UnimplementedWorkflowAPIServiceServer) DeployReleaseFromCatalog(ctx context.Context, req *DeployCatalogRequest) (*WorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployReleaseFromCatalog not implemented")
}
func (*UnimplementedWorkflowAPIServiceServer) UndeployRelease(ctx context.Context, req *UndeployRequest) (*WorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeployRelease not implemented")
}
func (*UnimplementedWorkflowAPIServiceServer) SuspendRelease(ctx context.Context, req *SuspendRequest) (*WorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendRelease not implemented")
}
func (*UnimplementedWorkflowAPIServiceServer) AbortRelease(ctx context.Context, req *AbortReleaseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortRelease not implemented")
}
func (*UnimplementedWorkflowAPIServiceServer) GetWorkflowLogs(ctx context.Context, req *WorkflowLogsRequest) (*Logs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowLogs not implemented")
}
func (*UnimplementedWorkflowAPIServiceServer) WatchWorkflowLogs(req *WorkflowLogsRequest, srv WorkflowAPIService_WatchWorkflowLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchWorkflowLogs not implemented")
}

func RegisterWorkflowAPIServiceServer(s *grpc.Server, srv WorkflowAPIServiceServer) {
	s.RegisterService(&_WorkflowAPIService_serviceDesc, srv)
}

func _WorkflowAPIService_BuildAndDeployRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildAndDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowAPIServiceServer).BuildAndDeployRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkflowAPIService/BuildAndDeployRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowAPIServiceServer).BuildAndDeployRelease(ctx, req.(*BuildAndDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowAPIService_DeployRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowAPIServiceServer).DeployRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkflowAPIService/DeployRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowAPIServiceServer).DeployRelease(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowAPIService_DeployReleaseFromCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowAPIServiceServer).DeployReleaseFromCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkflowAPIService/DeployReleaseFromCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowAPIServiceServer).DeployReleaseFromCatalog(ctx, req.(*DeployCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowAPIService_UndeployRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowAPIServiceServer).UndeployRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkflowAPIService/UndeployRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowAPIServiceServer).UndeployRelease(ctx, req.(*UndeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowAPIService_SuspendRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowAPIServiceServer).SuspendRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkflowAPIService/SuspendRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowAPIServiceServer).SuspendRelease(ctx, req.(*SuspendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowAPIService_AbortRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowAPIServiceServer).AbortRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkflowAPIService/AbortRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowAPIServiceServer).AbortRelease(ctx, req.(*AbortReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowAPIService_GetWorkflowLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowAPIServiceServer).GetWorkflowLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkflowAPIService/GetWorkflowLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowAPIServiceServer).GetWorkflowLogs(ctx, req.(*WorkflowLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowAPIService_WatchWorkflowLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkflowLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkflowAPIServiceServer).WatchWorkflowLogs(m, &workflowAPIServiceWatchWorkflowLogsServer{stream})
}

type WorkflowAPIService_WatchWorkflowLogsServer interface {
	Send(*Logs) error
	grpc.ServerStream
}

type workflowAPIServiceWatchWorkflowLogsServer struct {
	grpc.ServerStream
}

func (x *workflowAPIServiceWatchWorkflowLogsServer) Send(m *Logs) error {
	return x.ServerStream.SendMsg(m)
}

var _WorkflowAPIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WorkflowAPIService",
	HandlerType: (*WorkflowAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildAndDeployRelease",
			Handler:    _WorkflowAPIService_BuildAndDeployRelease_Handler,
		},
		{
			MethodName: "DeployRelease",
			Handler:    _WorkflowAPIService_DeployRelease_Handler,
		},
		{
			MethodName: "DeployReleaseFromCatalog",
			Handler:    _WorkflowAPIService_DeployReleaseFromCatalog_Handler,
		},
		{
			MethodName: "UndeployRelease",
			Handler:    _WorkflowAPIService_UndeployRelease_Handler,
		},
		{
			MethodName: "SuspendRelease",
			Handler:    _WorkflowAPIService_SuspendRelease_Handler,
		},
		{
			MethodName: "AbortRelease",
			Handler:    _WorkflowAPIService_AbortRelease_Handler,
		},
		{
			MethodName: "GetWorkflowLogs",
			Handler:    _WorkflowAPIService_GetWorkflowLogs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchWorkflowLogs",
			Handler:       _WorkflowAPIService_WatchWorkflowLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "workflowapi.proto",
}
