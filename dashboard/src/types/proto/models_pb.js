/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.AutoScaling', null, global);
goog.exportSymbol('proto.AutoScalingOptions', null, global);
goog.exportSymbol('proto.Block', null, global);
goog.exportSymbol('proto.Block.Type', null, global);
goog.exportSymbol('proto.BlockInstance', null, global);
goog.exportSymbol('proto.BlockInstance.State', null, global);
goog.exportSymbol('proto.BlockMetrics', null, global);
goog.exportSymbol('proto.BlockStatus', null, global);
goog.exportSymbol('proto.BlockStatus.State', null, global);
goog.exportSymbol('proto.BlockStatuses', null, global);
goog.exportSymbol('proto.BlockStorage', null, global);
goog.exportSymbol('proto.Blocks', null, global);
goog.exportSymbol('proto.BlocksMetrics', null, global);
goog.exportSymbol('proto.BuildConfig', null, global);
goog.exportSymbol('proto.BuildConfig.Language', null, global);
goog.exportSymbol('proto.BuildStatus', null, global);
goog.exportSymbol('proto.BuildStatus.State', null, global);
goog.exportSymbol('proto.CPUOptions', null, global);
goog.exportSymbol('proto.ConsoleLog', null, global);
goog.exportSymbol('proto.Environment', null, global);
goog.exportSymbol('proto.Environments', null, global);
goog.exportSymbol('proto.JobSpec', null, global);
goog.exportSymbol('proto.JobStatus', null, global);
goog.exportSymbol('proto.JobStatus.State', null, global);
goog.exportSymbol('proto.KintoConfiguration', null, global);
goog.exportSymbol('proto.Language', null, global);
goog.exportSymbol('proto.Logs', null, global);
goog.exportSymbol('proto.MemoryOptions', null, global);
goog.exportSymbol('proto.Release', null, global);
goog.exportSymbol('proto.Release.Type', null, global);
goog.exportSymbol('proto.ReleaseConfig', null, global);
goog.exportSymbol('proto.ReleasesStatus', null, global);
goog.exportSymbol('proto.Repository', null, global);
goog.exportSymbol('proto.Resources', null, global);
goog.exportSymbol('proto.RunConfig', null, global);
goog.exportSymbol('proto.RunConfig.Protocol', null, global);
goog.exportSymbol('proto.Status', null, global);
goog.exportSymbol('proto.Status.State', null, global);
goog.exportSymbol('proto.TeleportServiceData', null, global);
goog.exportSymbol('proto.TimeoutOptions', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Environment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Environment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Environment.displayName = 'proto.Environment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Environments = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Environments.repeatedFields_, null);
};
goog.inherits(proto.Environments, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Environments.displayName = 'proto.Environments';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Block.repeatedFields_, null);
};
goog.inherits(proto.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Block.displayName = 'proto.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Blocks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Blocks.repeatedFields_, null);
};
goog.inherits(proto.Blocks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Blocks.displayName = 'proto.Blocks';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Release = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Release.repeatedFields_, null);
};
goog.inherits(proto.Release, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Release.displayName = 'proto.Release';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BuildConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BuildConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BuildConfig.displayName = 'proto.BuildConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RunConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RunConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RunConfig.displayName = 'proto.RunConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Repository = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Repository, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Repository.displayName = 'proto.Repository';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JobSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JobSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.JobSpec.displayName = 'proto.JobSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AutoScaling = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AutoScaling, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AutoScaling.displayName = 'proto.AutoScaling';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Resources = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Resources, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Resources.displayName = 'proto.Resources';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Status.displayName = 'proto.Status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReleasesStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ReleasesStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ReleasesStatus.displayName = 'proto.ReleasesStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BuildStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BuildStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BuildStatus.displayName = 'proto.BuildStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsoleLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsoleLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConsoleLog.displayName = 'proto.ConsoleLog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlockStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BlockStatus.displayName = 'proto.BlockStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockStatuses = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BlockStatuses.repeatedFields_, null);
};
goog.inherits(proto.BlockStatuses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BlockStatuses.displayName = 'proto.BlockStatuses';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockMetrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlockMetrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BlockMetrics.displayName = 'proto.BlockMetrics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockInstance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlockInstance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BlockInstance.displayName = 'proto.BlockInstance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockStorage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlockStorage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BlockStorage.displayName = 'proto.BlockStorage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlocksMetrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlocksMetrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BlocksMetrics.displayName = 'proto.BlocksMetrics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Language = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Language, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Language.displayName = 'proto.Language';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MemoryOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MemoryOptions.repeatedFields_, null);
};
goog.inherits(proto.MemoryOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MemoryOptions.displayName = 'proto.MemoryOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CPUOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CPUOptions.repeatedFields_, null);
};
goog.inherits(proto.CPUOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CPUOptions.displayName = 'proto.CPUOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimeoutOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TimeoutOptions.repeatedFields_, null);
};
goog.inherits(proto.TimeoutOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TimeoutOptions.displayName = 'proto.TimeoutOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AutoScalingOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AutoScalingOptions.repeatedFields_, null);
};
goog.inherits(proto.AutoScalingOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AutoScalingOptions.displayName = 'proto.AutoScalingOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.KintoConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.KintoConfiguration.repeatedFields_, null);
};
goog.inherits(proto.KintoConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.KintoConfiguration.displayName = 'proto.KintoConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Logs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Logs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Logs.displayName = 'proto.Logs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JobStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JobStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.JobStatus.displayName = 'proto.JobStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TeleportServiceData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TeleportServiceData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TeleportServiceData.displayName = 'proto.TeleportServiceData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReleaseConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ReleaseConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ReleaseConfig.displayName = 'proto.ReleaseConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Environment.prototype.toObject = function(opt_includeInstance) {
  return proto.Environment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Environment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Environment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Environment}
 */
proto.Environment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Environment;
  return proto.Environment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Environment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Environment}
 */
proto.Environment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Environment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Environment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Environment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Environment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Environment.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Environment.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.Environment.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Environment.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Environments.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Environments.prototype.toObject = function(opt_includeInstance) {
  return proto.Environments.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Environments} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Environments.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.Environment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Environments}
 */
proto.Environments.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Environments;
  return proto.Environments.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Environments} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Environments}
 */
proto.Environments.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Environment;
      reader.readMessage(value,proto.Environment.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Environments.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Environments.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Environments} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Environments.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Environment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Environment items = 1;
 * @return {!Array<!proto.Environment>}
 */
proto.Environments.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.Environment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Environment, 1));
};


/** @param {!Array<!proto.Environment>} value */
proto.Environments.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Environment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Environment}
 */
proto.Environments.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Environment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Environments.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Block.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    envid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    displayname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    releasesMap: (f = msg.getReleasesMap()) ? f.toObject(includeInstance, proto.Release.toObject) : [],
    customdomainsList: jspb.Message.getRepeatedField(msg, 6),
    ispublicurl: jspb.Message.getFieldWithDefault(msg, 7, false),
    parentblockname: jspb.Message.getFieldWithDefault(msg, 8, ""),
    parentblockenvid: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Block}
 */
proto.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Block;
  return proto.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Block}
 */
proto.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayname(value);
      break;
    case 5:
      var value = msg.getReleasesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.Release.deserializeBinaryFromReader, "");
         });
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addCustomdomains(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspublicurl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentblockname(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentblockenvid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEnvid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDisplayname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReleasesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.Release.serializeBinaryToWriter);
  }
  f = message.getCustomdomainsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getIspublicurl();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getParentblockname();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getParentblockenvid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Block.Type = {
  NOT_SET: 0,
  BACKEND_API: 1,
  STATIC_SITE: 2,
  WEB_APP: 3,
  JAMSTACK: 4,
  JOB: 5,
  CRON_JOB: 6,
  WORKER: 7,
  CATALOG: 8,
  HELM: 9
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.Block.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Block.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.Block.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Block.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string envId = 3;
 * @return {string}
 */
proto.Block.prototype.getEnvid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Block.prototype.setEnvid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string displayName = 4;
 * @return {string}
 */
proto.Block.prototype.getDisplayname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Block.prototype.setDisplayname = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * map<string, Release> releases = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.Release>}
 */
proto.Block.prototype.getReleasesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.Release>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.Release));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.Block.prototype.clearReleasesMap = function() {
  this.getReleasesMap().clear();
};


/**
 * repeated string customDomains = 6;
 * @return {!Array<string>}
 */
proto.Block.prototype.getCustomdomainsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.Block.prototype.setCustomdomainsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.Block.prototype.addCustomdomains = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Block.prototype.clearCustomdomainsList = function() {
  this.setCustomdomainsList([]);
};


/**
 * optional bool isPublicURL = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Block.prototype.getIspublicurl = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.Block.prototype.setIspublicurl = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional string parentBlockName = 8;
 * @return {string}
 */
proto.Block.prototype.getParentblockname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.Block.prototype.setParentblockname = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string parentBlockEnvId = 9;
 * @return {string}
 */
proto.Block.prototype.getParentblockenvid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.Block.prototype.setParentblockenvid = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Blocks.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Blocks.prototype.toObject = function(opt_includeInstance) {
  return proto.Blocks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Blocks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Blocks.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.Block.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Blocks}
 */
proto.Blocks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Blocks;
  return proto.Blocks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Blocks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Blocks}
 */
proto.Blocks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Block;
      reader.readMessage(value,proto.Block.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Blocks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Blocks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Blocks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Blocks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Block.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Block items = 1;
 * @return {!Array<!proto.Block>}
 */
proto.Blocks.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Block, 1));
};


/** @param {!Array<!proto.Block>} value */
proto.Blocks.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Block}
 */
proto.Blocks.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Block, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Blocks.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Release.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Release.prototype.toObject = function(opt_includeInstance) {
  return proto.Release.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Release} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Release.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createdat: (f = msg.getCreatedat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    buildconfig: (f = msg.getBuildconfig()) && proto.BuildConfig.toObject(includeInstance, f),
    runconfig: (f = msg.getRunconfig()) && proto.RunConfig.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && proto.Status.toObject(includeInstance, f),
    startedat: (f = msg.getStartedat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    endedat: (f = msg.getEndedat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 8, 0),
    tagsList: jspb.Message.getRepeatedField(msg, 9),
    commitsha: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Release}
 */
proto.Release.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Release;
  return proto.Release.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Release} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Release}
 */
proto.Release.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedat(value);
      break;
    case 3:
      var value = new proto.BuildConfig;
      reader.readMessage(value,proto.BuildConfig.deserializeBinaryFromReader);
      msg.setBuildconfig(value);
      break;
    case 4:
      var value = new proto.RunConfig;
      reader.readMessage(value,proto.RunConfig.deserializeBinaryFromReader);
      msg.setRunconfig(value);
      break;
    case 5:
      var value = new proto.Status;
      reader.readMessage(value,proto.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStartedat(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEndedat(value);
      break;
    case 8:
      var value = /** @type {!proto.Release.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitsha(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Release.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Release.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Release} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Release.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreatedat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getBuildconfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.BuildConfig.serializeBinaryToWriter
    );
  }
  f = message.getRunconfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.RunConfig.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Status.serializeBinaryToWriter
    );
  }
  f = message.getStartedat();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEndedat();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getCommitsha();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Release.Type = {
  NOT_SET: 0,
  DEPLOY: 1,
  UNDEPLOY: 2,
  SUSPEND: 3,
  ROLLBACK: 4
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.Release.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Release.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp createdAt = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.Release.prototype.getCreatedat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.Release.prototype.setCreatedat = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.Release.prototype.clearCreatedat = function() {
  this.setCreatedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Release.prototype.hasCreatedat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BuildConfig buildConfig = 3;
 * @return {?proto.BuildConfig}
 */
proto.Release.prototype.getBuildconfig = function() {
  return /** @type{?proto.BuildConfig} */ (
    jspb.Message.getWrapperField(this, proto.BuildConfig, 3));
};


/** @param {?proto.BuildConfig|undefined} value */
proto.Release.prototype.setBuildconfig = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.Release.prototype.clearBuildconfig = function() {
  this.setBuildconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Release.prototype.hasBuildconfig = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RunConfig runConfig = 4;
 * @return {?proto.RunConfig}
 */
proto.Release.prototype.getRunconfig = function() {
  return /** @type{?proto.RunConfig} */ (
    jspb.Message.getWrapperField(this, proto.RunConfig, 4));
};


/** @param {?proto.RunConfig|undefined} value */
proto.Release.prototype.setRunconfig = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.Release.prototype.clearRunconfig = function() {
  this.setRunconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Release.prototype.hasRunconfig = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Status status = 5;
 * @return {?proto.Status}
 */
proto.Release.prototype.getStatus = function() {
  return /** @type{?proto.Status} */ (
    jspb.Message.getWrapperField(this, proto.Status, 5));
};


/** @param {?proto.Status|undefined} value */
proto.Release.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.Release.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Release.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp startedAt = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.Release.prototype.getStartedat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.Release.prototype.setStartedat = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.Release.prototype.clearStartedat = function() {
  this.setStartedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Release.prototype.hasStartedat = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional google.protobuf.Timestamp endedAt = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.Release.prototype.getEndedat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.Release.prototype.setEndedat = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.Release.prototype.clearEndedat = function() {
  this.setEndedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Release.prototype.hasEndedat = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Type type = 8;
 * @return {!proto.Release.Type}
 */
proto.Release.prototype.getType = function() {
  return /** @type {!proto.Release.Type} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.Release.Type} value */
proto.Release.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * repeated string tags = 9;
 * @return {!Array<string>}
 */
proto.Release.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array<string>} value */
proto.Release.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.Release.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Release.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * optional string commitSha = 10;
 * @return {string}
 */
proto.Release.prototype.getCommitsha = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.Release.prototype.setCommitsha = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BuildConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.BuildConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BuildConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    image: jspb.Message.getFieldWithDefault(msg, 2, ""),
    language: jspb.Message.getFieldWithDefault(msg, 3, 0),
    languageversion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    buildcommand: jspb.Message.getFieldWithDefault(msg, 5, ""),
    runcommand: jspb.Message.getFieldWithDefault(msg, 6, ""),
    pathtocode: jspb.Message.getFieldWithDefault(msg, 7, ""),
    pathtostaticoutput: jspb.Message.getFieldWithDefault(msg, 11, ""),
    dockerfilefilename: jspb.Message.getFieldWithDefault(msg, 8, ""),
    buildargsMap: (f = msg.getBuildargsMap()) ? f.toObject(includeInstance, undefined) : [],
    repository: (f = msg.getRepository()) && proto.Repository.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BuildConfig}
 */
proto.BuildConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BuildConfig;
  return proto.BuildConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BuildConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BuildConfig}
 */
proto.BuildConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 3:
      var value = /** @type {!proto.BuildConfig.Language} */ (reader.readEnum());
      msg.setLanguage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageversion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuildcommand(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRuncommand(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathtocode(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathtostaticoutput(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDockerfilefilename(value);
      break;
    case 9:
      var value = msg.getBuildargsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 10:
      var value = new proto.Repository;
      reader.readMessage(value,proto.Repository.deserializeBinaryFromReader);
      msg.setRepository(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BuildConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BuildConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BuildConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLanguage();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getLanguageversion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBuildcommand();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRuncommand();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPathtocode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPathtostaticoutput();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getDockerfilefilename();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getBuildargsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getRepository();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Repository.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.BuildConfig.Language = {
  NOT_SET: 0,
  DOCKERFILE: 1,
  GOLANG: 2,
  NODEJS: 3,
  PYTHON: 4,
  JAVA: 5,
  RUBY: 6,
  PHP: 7,
  RUST: 8,
  ELIXIR: 9
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.BuildConfig.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.BuildConfig.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string image = 2;
 * @return {string}
 */
proto.BuildConfig.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BuildConfig.prototype.setImage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Language language = 3;
 * @return {!proto.BuildConfig.Language}
 */
proto.BuildConfig.prototype.getLanguage = function() {
  return /** @type {!proto.BuildConfig.Language} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.BuildConfig.Language} value */
proto.BuildConfig.prototype.setLanguage = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string languageVersion = 4;
 * @return {string}
 */
proto.BuildConfig.prototype.getLanguageversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.BuildConfig.prototype.setLanguageversion = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string buildCommand = 5;
 * @return {string}
 */
proto.BuildConfig.prototype.getBuildcommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.BuildConfig.prototype.setBuildcommand = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string runCommand = 6;
 * @return {string}
 */
proto.BuildConfig.prototype.getRuncommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.BuildConfig.prototype.setRuncommand = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string pathToCode = 7;
 * @return {string}
 */
proto.BuildConfig.prototype.getPathtocode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.BuildConfig.prototype.setPathtocode = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string pathToStaticOutput = 11;
 * @return {string}
 */
proto.BuildConfig.prototype.getPathtostaticoutput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.BuildConfig.prototype.setPathtostaticoutput = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string dockerfileFileName = 8;
 * @return {string}
 */
proto.BuildConfig.prototype.getDockerfilefilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.BuildConfig.prototype.setDockerfilefilename = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * map<string, string> buildArgs = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.BuildConfig.prototype.getBuildargsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.BuildConfig.prototype.clearBuildargsMap = function() {
  this.getBuildargsMap().clear();
};


/**
 * optional Repository repository = 10;
 * @return {?proto.Repository}
 */
proto.BuildConfig.prototype.getRepository = function() {
  return /** @type{?proto.Repository} */ (
    jspb.Message.getWrapperField(this, proto.Repository, 10));
};


/** @param {?proto.Repository|undefined} value */
proto.BuildConfig.prototype.setRepository = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.BuildConfig.prototype.clearRepository = function() {
  this.setRepository(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildConfig.prototype.hasRepository = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RunConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.RunConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RunConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RunConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    port: jspb.Message.getFieldWithDefault(msg, 2, ""),
    autoscaling: (f = msg.getAutoscaling()) && proto.AutoScaling.toObject(includeInstance, f),
    envvarsMap: (f = msg.getEnvvarsMap()) ? f.toObject(includeInstance, undefined) : [],
    resources: (f = msg.getResources()) && proto.Resources.toObject(includeInstance, f),
    timeoutinsec: jspb.Message.getFieldWithDefault(msg, 6, 0),
    jobspec: (f = msg.getJobspec()) && proto.JobSpec.toObject(includeInstance, f),
    host: jspb.Message.getFieldWithDefault(msg, 8, ""),
    costoptimizationenabled: jspb.Message.getFieldWithDefault(msg, 9, false),
    sleepmodeenabled: jspb.Message.getFieldWithDefault(msg, 10, false),
    protocol: jspb.Message.getFieldWithDefault(msg, 11, 0),
    sleepmodettlseconds: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RunConfig}
 */
proto.RunConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RunConfig;
  return proto.RunConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RunConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RunConfig}
 */
proto.RunConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Block.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPort(value);
      break;
    case 3:
      var value = new proto.AutoScaling;
      reader.readMessage(value,proto.AutoScaling.deserializeBinaryFromReader);
      msg.setAutoscaling(value);
      break;
    case 4:
      var value = msg.getEnvvarsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 5:
      var value = new proto.Resources;
      reader.readMessage(value,proto.Resources.deserializeBinaryFromReader);
      msg.setResources(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeoutinsec(value);
      break;
    case 7:
      var value = new proto.JobSpec;
      reader.readMessage(value,proto.JobSpec.deserializeBinaryFromReader);
      msg.setJobspec(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCostoptimizationenabled(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSleepmodeenabled(value);
      break;
    case 11:
      var value = /** @type {!proto.RunConfig.Protocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSleepmodettlseconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RunConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RunConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RunConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RunConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPort();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAutoscaling();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.AutoScaling.serializeBinaryToWriter
    );
  }
  f = message.getEnvvarsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getResources();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Resources.serializeBinaryToWriter
    );
  }
  f = message.getTimeoutinsec();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getJobspec();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.JobSpec.serializeBinaryToWriter
    );
  }
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCostoptimizationenabled();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getSleepmodeenabled();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getProtocol();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getSleepmodettlseconds();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.RunConfig.Protocol = {
  NOT_SET: 0,
  HTTP: 1,
  GRPC: 2
};

/**
 * optional Block.Type type = 1;
 * @return {!proto.Block.Type}
 */
proto.RunConfig.prototype.getType = function() {
  return /** @type {!proto.Block.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Block.Type} value */
proto.RunConfig.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string port = 2;
 * @return {string}
 */
proto.RunConfig.prototype.getPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RunConfig.prototype.setPort = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional AutoScaling autoScaling = 3;
 * @return {?proto.AutoScaling}
 */
proto.RunConfig.prototype.getAutoscaling = function() {
  return /** @type{?proto.AutoScaling} */ (
    jspb.Message.getWrapperField(this, proto.AutoScaling, 3));
};


/** @param {?proto.AutoScaling|undefined} value */
proto.RunConfig.prototype.setAutoscaling = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.RunConfig.prototype.clearAutoscaling = function() {
  this.setAutoscaling(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RunConfig.prototype.hasAutoscaling = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, string> envVars = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.RunConfig.prototype.getEnvvarsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.RunConfig.prototype.clearEnvvarsMap = function() {
  this.getEnvvarsMap().clear();
};


/**
 * optional Resources resources = 5;
 * @return {?proto.Resources}
 */
proto.RunConfig.prototype.getResources = function() {
  return /** @type{?proto.Resources} */ (
    jspb.Message.getWrapperField(this, proto.Resources, 5));
};


/** @param {?proto.Resources|undefined} value */
proto.RunConfig.prototype.setResources = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.RunConfig.prototype.clearResources = function() {
  this.setResources(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RunConfig.prototype.hasResources = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 timeoutInSec = 6;
 * @return {number}
 */
proto.RunConfig.prototype.getTimeoutinsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.RunConfig.prototype.setTimeoutinsec = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional JobSpec jobSpec = 7;
 * @return {?proto.JobSpec}
 */
proto.RunConfig.prototype.getJobspec = function() {
  return /** @type{?proto.JobSpec} */ (
    jspb.Message.getWrapperField(this, proto.JobSpec, 7));
};


/** @param {?proto.JobSpec|undefined} value */
proto.RunConfig.prototype.setJobspec = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.RunConfig.prototype.clearJobspec = function() {
  this.setJobspec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RunConfig.prototype.hasJobspec = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string host = 8;
 * @return {string}
 */
proto.RunConfig.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.RunConfig.prototype.setHost = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool costOptimizationEnabled = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.RunConfig.prototype.getCostoptimizationenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.RunConfig.prototype.setCostoptimizationenabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool sleepModeEnabled = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.RunConfig.prototype.getSleepmodeenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.RunConfig.prototype.setSleepmodeenabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional Protocol protocol = 11;
 * @return {!proto.RunConfig.Protocol}
 */
proto.RunConfig.prototype.getProtocol = function() {
  return /** @type {!proto.RunConfig.Protocol} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.RunConfig.Protocol} value */
proto.RunConfig.prototype.setProtocol = function(value) {
  jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional int32 sleepModeTTLSeconds = 12;
 * @return {number}
 */
proto.RunConfig.prototype.getSleepmodettlseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.RunConfig.prototype.setSleepmodettlseconds = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Repository.prototype.toObject = function(opt_includeInstance) {
  return proto.Repository.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Repository} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repository.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accesstoken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    branch: jspb.Message.getFieldWithDefault(msg, 3, ""),
    githubinstallationid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    githubusertoken: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Repository}
 */
proto.Repository.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Repository;
  return proto.Repository.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Repository} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Repository}
 */
proto.Repository.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBranch(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGithubinstallationid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGithubusertoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Repository.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Repository.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Repository} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repository.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBranch();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGithubinstallationid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGithubusertoken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.Repository.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Repository.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string accessToken = 2;
 * @return {string}
 */
proto.Repository.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Repository.prototype.setAccesstoken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string branch = 3;
 * @return {string}
 */
proto.Repository.prototype.getBranch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Repository.prototype.setBranch = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string githubInstallationId = 4;
 * @return {string}
 */
proto.Repository.prototype.getGithubinstallationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Repository.prototype.setGithubinstallationid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string githubUserToken = 5;
 * @return {string}
 */
proto.Repository.prototype.getGithubusertoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Repository.prototype.setGithubusertoken = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JobSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.JobSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JobSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JobSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    cronpattern: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timeoutinsec: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JobSpec}
 */
proto.JobSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JobSpec;
  return proto.JobSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JobSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JobSpec}
 */
proto.JobSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCronpattern(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeoutinsec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JobSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JobSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JobSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JobSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCronpattern();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimeoutinsec();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string cronPattern = 1;
 * @return {string}
 */
proto.JobSpec.prototype.getCronpattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.JobSpec.prototype.setCronpattern = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 timeoutInSec = 2;
 * @return {number}
 */
proto.JobSpec.prototype.getTimeoutinsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.JobSpec.prototype.setTimeoutinsec = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AutoScaling.prototype.toObject = function(opt_includeInstance) {
  return proto.AutoScaling.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AutoScaling} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AutoScaling.toObject = function(includeInstance, msg) {
  var f, obj = {
    min: jspb.Message.getFieldWithDefault(msg, 1, 0),
    max: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cpupercent: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AutoScaling}
 */
proto.AutoScaling.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AutoScaling;
  return proto.AutoScaling.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AutoScaling} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AutoScaling}
 */
proto.AutoScaling.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMax(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCpupercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AutoScaling.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AutoScaling.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AutoScaling} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AutoScaling.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMin();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMax();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCpupercent();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 min = 1;
 * @return {number}
 */
proto.AutoScaling.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AutoScaling.prototype.setMin = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 max = 2;
 * @return {number}
 */
proto.AutoScaling.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.AutoScaling.prototype.setMax = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 cpuPercent = 3;
 * @return {number}
 */
proto.AutoScaling.prototype.getCpupercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.AutoScaling.prototype.setCpupercent = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Resources.prototype.toObject = function(opt_includeInstance) {
  return proto.Resources.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Resources} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Resources.toObject = function(includeInstance, msg) {
  var f, obj = {
    memoryinmb: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cpuincore: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Resources}
 */
proto.Resources.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Resources;
  return proto.Resources.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Resources} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Resources}
 */
proto.Resources.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMemoryinmb(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCpuincore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Resources.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Resources.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Resources} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Resources.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemoryinmb();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCpuincore();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional int32 memoryInMB = 1;
 * @return {number}
 */
proto.Resources.prototype.getMemoryinmb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Resources.prototype.setMemoryinmb = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float cpuInCore = 2;
 * @return {number}
 */
proto.Resources.prototype.getCpuincore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Resources.prototype.setCpuincore = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Status}
 */
proto.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Status;
  return proto.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Status}
 */
proto.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.Status.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Status.State = {
  NOT_SET: 0,
  FAIL: 1,
  SUCCESS: 2,
  RUNNING: 3,
  PENDING: 4,
  ABORTED: 5,
  REVIEW_DEPLOY: 6
};

/**
 * optional State state = 2;
 * @return {!proto.Status.State}
 */
proto.Status.prototype.getState = function() {
  return /** @type {!proto.Status.State} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Status.State} value */
proto.Status.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReleasesStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.ReleasesStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReleasesStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReleasesStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    envid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    releasesMap: (f = msg.getReleasesMap()) ? f.toObject(includeInstance, proto.Status.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReleasesStatus}
 */
proto.ReleasesStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReleasesStatus;
  return proto.ReleasesStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReleasesStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReleasesStatus}
 */
proto.ReleasesStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvid(value);
      break;
    case 3:
      var value = msg.getReleasesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.Status.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReleasesStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReleasesStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReleasesStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReleasesStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEnvid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReleasesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.Status.serializeBinaryToWriter);
  }
};


/**
 * optional string blockName = 1;
 * @return {string}
 */
proto.ReleasesStatus.prototype.getBlockname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ReleasesStatus.prototype.setBlockname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string envId = 2;
 * @return {string}
 */
proto.ReleasesStatus.prototype.getEnvid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ReleasesStatus.prototype.setEnvid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, Status> releases = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.Status>}
 */
proto.ReleasesStatus.prototype.getReleasesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.Status>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.Status));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.ReleasesStatus.prototype.clearReleasesMap = function() {
  this.getReleasesMap().clear();
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BuildStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.BuildStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BuildStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    starttime: (f = msg.getStarttime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    finishtime: (f = msg.getFinishtime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BuildStatus}
 */
proto.BuildStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BuildStatus;
  return proto.BuildStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BuildStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BuildStatus}
 */
proto.BuildStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.BuildStatus.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStarttime(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFinishtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BuildStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BuildStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BuildStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStarttime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFinishtime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.BuildStatus.State = {
  NOT_SET: 0,
  UNKNOWN: 1,
  QUEUED: 2,
  WORKING: 3,
  SUCCESS: 4,
  FAILURE: 5,
  INTERNAL_ERROR: 6,
  TIMEOUT: 7,
  CANCELLED: 8,
  EXPIRED: 9
};

/**
 * optional State state = 1;
 * @return {!proto.BuildStatus.State}
 */
proto.BuildStatus.prototype.getState = function() {
  return /** @type {!proto.BuildStatus.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.BuildStatus.State} value */
proto.BuildStatus.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp startTime = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.BuildStatus.prototype.getStarttime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.BuildStatus.prototype.setStarttime = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.BuildStatus.prototype.clearStarttime = function() {
  this.setStarttime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildStatus.prototype.hasStarttime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp finishTime = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.BuildStatus.prototype.getFinishtime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.BuildStatus.prototype.setFinishtime = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.BuildStatus.prototype.clearFinishtime = function() {
  this.setFinishtime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildStatus.prototype.hasFinishtime = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConsoleLog.prototype.toObject = function(opt_includeInstance) {
  return proto.ConsoleLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConsoleLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsoleLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    instancename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsoleLog}
 */
proto.ConsoleLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConsoleLog;
  return proto.ConsoleLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsoleLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsoleLog}
 */
proto.ConsoleLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstancename(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsoleLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConsoleLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsoleLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsoleLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstancename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string instanceName = 1;
 * @return {string}
 */
proto.ConsoleLog.prototype.getInstancename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ConsoleLog.prototype.setInstancename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ConsoleLog.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ConsoleLog.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ConsoleLog.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.ConsoleLog.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    envid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    releaseid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    state: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockStatus}
 */
proto.BlockStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockStatus;
  return proto.BlockStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockStatus}
 */
proto.BlockStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReleaseid(value);
      break;
    case 7:
      var value = /** @type {!proto.BlockStatus.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEnvid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReleaseid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.BlockStatus.State = {
  NOT_SET: 0,
  HEALTHY: 1,
  UNHEALTHY: 2,
  SUSPENDED: 3,
  SLEEPING: 4
};

/**
 * optional string blockName = 1;
 * @return {string}
 */
proto.BlockStatus.prototype.getBlockname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.BlockStatus.prototype.setBlockname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string envId = 2;
 * @return {string}
 */
proto.BlockStatus.prototype.getEnvid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BlockStatus.prototype.setEnvid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string releaseId = 3;
 * @return {string}
 */
proto.BlockStatus.prototype.getReleaseid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.BlockStatus.prototype.setReleaseid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional State state = 7;
 * @return {!proto.BlockStatus.State}
 */
proto.BlockStatus.prototype.getState = function() {
  return /** @type {!proto.BlockStatus.State} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.BlockStatus.State} value */
proto.BlockStatus.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BlockStatuses.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockStatuses.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockStatuses.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockStatuses} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockStatuses.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockstatusesList: jspb.Message.toObjectList(msg.getBlockstatusesList(),
    proto.BlockStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockStatuses}
 */
proto.BlockStatuses.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockStatuses;
  return proto.BlockStatuses.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockStatuses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockStatuses}
 */
proto.BlockStatuses.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.BlockStatus;
      reader.readMessage(value,proto.BlockStatus.deserializeBinaryFromReader);
      msg.addBlockstatuses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockStatuses.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockStatuses.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockStatuses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockStatuses.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockstatusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.BlockStatus.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BlockStatus blockStatuses = 1;
 * @return {!Array<!proto.BlockStatus>}
 */
proto.BlockStatuses.prototype.getBlockstatusesList = function() {
  return /** @type{!Array<!proto.BlockStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BlockStatus, 1));
};


/** @param {!Array<!proto.BlockStatus>} value */
proto.BlockStatuses.prototype.setBlockstatusesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.BlockStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BlockStatus}
 */
proto.BlockStatuses.prototype.addBlockstatuses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.BlockStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.BlockStatuses.prototype.clearBlockstatusesList = function() {
  this.setBlockstatusesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockMetrics.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockMetrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockMetrics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockMetrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    envid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    instancesMap: (f = msg.getInstancesMap()) ? f.toObject(includeInstance, proto.BlockInstance.toObject) : [],
    storagesMap: (f = msg.getStoragesMap()) ? f.toObject(includeInstance, proto.BlockStorage.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockMetrics}
 */
proto.BlockMetrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockMetrics;
  return proto.BlockMetrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockMetrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockMetrics}
 */
proto.BlockMetrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvid(value);
      break;
    case 3:
      var value = msg.getInstancesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.BlockInstance.deserializeBinaryFromReader, "");
         });
      break;
    case 5:
      var value = msg.getStoragesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.BlockStorage.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockMetrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockMetrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockMetrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockMetrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEnvid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInstancesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.BlockInstance.serializeBinaryToWriter);
  }
  f = message.getStoragesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.BlockStorage.serializeBinaryToWriter);
  }
};


/**
 * optional string blockName = 1;
 * @return {string}
 */
proto.BlockMetrics.prototype.getBlockname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.BlockMetrics.prototype.setBlockname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string envId = 2;
 * @return {string}
 */
proto.BlockMetrics.prototype.getEnvid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BlockMetrics.prototype.setEnvid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, BlockInstance> instances = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.BlockInstance>}
 */
proto.BlockMetrics.prototype.getInstancesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.BlockInstance>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.BlockInstance));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.BlockMetrics.prototype.clearInstancesMap = function() {
  this.getInstancesMap().clear();
};


/**
 * map<string, BlockStorage> storages = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.BlockStorage>}
 */
proto.BlockMetrics.prototype.getStoragesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.BlockStorage>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.BlockStorage));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.BlockMetrics.prototype.clearStoragesMap = function() {
  this.getStoragesMap().clear();
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockInstance.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockInstance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockInstance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockInstance.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    releaseid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cpurequests: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cpuusage: jspb.Message.getFieldWithDefault(msg, 4, 0),
    memrequests: jspb.Message.getFieldWithDefault(msg, 5, 0),
    memusage: jspb.Message.getFieldWithDefault(msg, 6, 0),
    restarts: jspb.Message.getFieldWithDefault(msg, 7, 0),
    state: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockInstance}
 */
proto.BlockInstance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockInstance;
  return proto.BlockInstance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockInstance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockInstance}
 */
proto.BlockInstance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReleaseid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCpurequests(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCpuusage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMemrequests(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMemusage(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRestarts(value);
      break;
    case 8:
      var value = /** @type {!proto.BlockInstance.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockInstance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockInstance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockInstance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockInstance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReleaseid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCpurequests();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCpuusage();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMemrequests();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getMemusage();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getRestarts();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.BlockInstance.State = {
  NOT_SET: 0,
  RUNNING: 1,
  COMPLETED: 2,
  ERROR: 3,
  OOM_KILLED: 4
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.BlockInstance.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.BlockInstance.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string releaseId = 2;
 * @return {string}
 */
proto.BlockInstance.prototype.getReleaseid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BlockInstance.prototype.setReleaseid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 cpuRequests = 3;
 * @return {number}
 */
proto.BlockInstance.prototype.getCpurequests = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BlockInstance.prototype.setCpurequests = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 cpuUsage = 4;
 * @return {number}
 */
proto.BlockInstance.prototype.getCpuusage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BlockInstance.prototype.setCpuusage = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 memRequests = 5;
 * @return {number}
 */
proto.BlockInstance.prototype.getMemrequests = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BlockInstance.prototype.setMemrequests = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 memUsage = 6;
 * @return {number}
 */
proto.BlockInstance.prototype.getMemusage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.BlockInstance.prototype.setMemusage = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 restarts = 7;
 * @return {number}
 */
proto.BlockInstance.prototype.getRestarts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.BlockInstance.prototype.setRestarts = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional State state = 8;
 * @return {!proto.BlockInstance.State}
 */
proto.BlockInstance.prototype.getState = function() {
  return /** @type {!proto.BlockInstance.State} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.BlockInstance.State} value */
proto.BlockInstance.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockStorage.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockStorage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockStorage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockStorage.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    capacityinbytes: jspb.Message.getFieldWithDefault(msg, 2, 0),
    usagepercent: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mountpath: jspb.Message.getFieldWithDefault(msg, 4, ""),
    instanceid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    mountedusageinbytes: jspb.Message.getFieldWithDefault(msg, 6, 0),
    mountedcapacityinbytes: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockStorage}
 */
proto.BlockStorage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockStorage;
  return proto.BlockStorage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockStorage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockStorage}
 */
proto.BlockStorage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCapacityinbytes(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsagepercent(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMountpath(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstanceid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMountedusageinbytes(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMountedcapacityinbytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockStorage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockStorage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockStorage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockStorage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCapacityinbytes();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUsagepercent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMountpath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInstanceid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMountedusageinbytes();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getMountedcapacityinbytes();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.BlockStorage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.BlockStorage.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 capacityInBytes = 2;
 * @return {number}
 */
proto.BlockStorage.prototype.getCapacityinbytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BlockStorage.prototype.setCapacityinbytes = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string usagePercent = 3;
 * @return {string}
 */
proto.BlockStorage.prototype.getUsagepercent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.BlockStorage.prototype.setUsagepercent = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string mountPath = 4;
 * @return {string}
 */
proto.BlockStorage.prototype.getMountpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.BlockStorage.prototype.setMountpath = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string instanceId = 5;
 * @return {string}
 */
proto.BlockStorage.prototype.getInstanceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.BlockStorage.prototype.setInstanceid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 mountedUsageInBytes = 6;
 * @return {number}
 */
proto.BlockStorage.prototype.getMountedusageinbytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.BlockStorage.prototype.setMountedusageinbytes = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 mountedCapacityInBytes = 7;
 * @return {number}
 */
proto.BlockStorage.prototype.getMountedcapacityinbytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.BlockStorage.prototype.setMountedcapacityinbytes = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlocksMetrics.prototype.toObject = function(opt_includeInstance) {
  return proto.BlocksMetrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlocksMetrics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlocksMetrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    blocksMap: (f = msg.getBlocksMap()) ? f.toObject(includeInstance, proto.BlockMetrics.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlocksMetrics}
 */
proto.BlocksMetrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlocksMetrics;
  return proto.BlocksMetrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlocksMetrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlocksMetrics}
 */
proto.BlocksMetrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getBlocksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.BlockMetrics.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlocksMetrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlocksMetrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlocksMetrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlocksMetrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlocksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.BlockMetrics.serializeBinaryToWriter);
  }
};


/**
 * map<string, BlockMetrics> blocks = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.BlockMetrics>}
 */
proto.BlocksMetrics.prototype.getBlocksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.BlockMetrics>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.BlockMetrics));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.BlocksMetrics.prototype.clearBlocksMap = function() {
  this.getBlocksMap().clear();
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Language.prototype.toObject = function(opt_includeInstance) {
  return proto.Language.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Language} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Language.toObject = function(includeInstance, msg) {
  var f, obj = {
    language: jspb.Message.getFieldWithDefault(msg, 1, 0),
    image: jspb.Message.getFieldWithDefault(msg, 2, ""),
    versionstagsMap: (f = msg.getVersionstagsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Language}
 */
proto.Language.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Language;
  return proto.Language.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Language} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Language}
 */
proto.Language.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.BuildConfig.Language} */ (reader.readEnum());
      msg.setLanguage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 3:
      var value = msg.getVersionstagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Language.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Language.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Language} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Language.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguage();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersionstagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional BuildConfig.Language language = 1;
 * @return {!proto.BuildConfig.Language}
 */
proto.Language.prototype.getLanguage = function() {
  return /** @type {!proto.BuildConfig.Language} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.BuildConfig.Language} value */
proto.Language.prototype.setLanguage = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string image = 2;
 * @return {string}
 */
proto.Language.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Language.prototype.setImage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> versionsTags = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.Language.prototype.getVersionstagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.Language.prototype.clearVersionstagsMap = function() {
  this.getVersionstagsMap().clear();
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MemoryOptions.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MemoryOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.MemoryOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MemoryOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MemoryOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    defaultvalue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    valuesList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MemoryOptions}
 */
proto.MemoryOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MemoryOptions;
  return proto.MemoryOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MemoryOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MemoryOptions}
 */
proto.MemoryOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefaultvalue(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MemoryOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MemoryOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MemoryOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MemoryOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefaultvalue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 defaultValue = 1;
 * @return {number}
 */
proto.MemoryOptions.prototype.getDefaultvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MemoryOptions.prototype.setDefaultvalue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated int32 values = 2;
 * @return {!Array<number>}
 */
proto.MemoryOptions.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.MemoryOptions.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.MemoryOptions.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.MemoryOptions.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CPUOptions.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CPUOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.CPUOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CPUOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CPUOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    defaultvalue: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    valuesList: jspb.Message.getRepeatedFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CPUOptions}
 */
proto.CPUOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CPUOptions;
  return proto.CPUOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CPUOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CPUOptions}
 */
proto.CPUOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDefaultvalue(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CPUOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CPUOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CPUOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CPUOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefaultvalue();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
};


/**
 * optional float defaultValue = 1;
 * @return {number}
 */
proto.CPUOptions.prototype.getDefaultvalue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.CPUOptions.prototype.setDefaultvalue = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * repeated float values = 2;
 * @return {!Array<number>}
 */
proto.CPUOptions.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {!Array<number>} value */
proto.CPUOptions.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.CPUOptions.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.CPUOptions.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TimeoutOptions.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimeoutOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.TimeoutOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimeoutOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimeoutOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    defaultvalue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    valuesList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimeoutOptions}
 */
proto.TimeoutOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimeoutOptions;
  return proto.TimeoutOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimeoutOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimeoutOptions}
 */
proto.TimeoutOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefaultvalue(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimeoutOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimeoutOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimeoutOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimeoutOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefaultvalue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 defaultValue = 1;
 * @return {number}
 */
proto.TimeoutOptions.prototype.getDefaultvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TimeoutOptions.prototype.setDefaultvalue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated int32 values = 2;
 * @return {!Array<number>}
 */
proto.TimeoutOptions.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.TimeoutOptions.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.TimeoutOptions.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.TimeoutOptions.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AutoScalingOptions.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AutoScalingOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.AutoScalingOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AutoScalingOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AutoScalingOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    defaultminvalue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    defaultmaxvalue: jspb.Message.getFieldWithDefault(msg, 2, 0),
    valuesList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AutoScalingOptions}
 */
proto.AutoScalingOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AutoScalingOptions;
  return proto.AutoScalingOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AutoScalingOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AutoScalingOptions}
 */
proto.AutoScalingOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefaultminvalue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefaultmaxvalue(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AutoScalingOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AutoScalingOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AutoScalingOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AutoScalingOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefaultminvalue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDefaultmaxvalue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 defaultMinValue = 1;
 * @return {number}
 */
proto.AutoScalingOptions.prototype.getDefaultminvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AutoScalingOptions.prototype.setDefaultminvalue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 defaultMaxValue = 2;
 * @return {number}
 */
proto.AutoScalingOptions.prototype.getDefaultmaxvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.AutoScalingOptions.prototype.setDefaultmaxvalue = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated int32 values = 3;
 * @return {!Array<number>}
 */
proto.AutoScalingOptions.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.AutoScalingOptions.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.AutoScalingOptions.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.AutoScalingOptions.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.KintoConfiguration.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.KintoConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.KintoConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.KintoConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KintoConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    languagesList: jspb.Message.toObjectList(msg.getLanguagesList(),
    proto.Language.toObject, includeInstance),
    memoryoptions: (f = msg.getMemoryoptions()) && proto.MemoryOptions.toObject(includeInstance, f),
    cpuoptions: (f = msg.getCpuoptions()) && proto.CPUOptions.toObject(includeInstance, f),
    timeoutoptions: (f = msg.getTimeoutoptions()) && proto.TimeoutOptions.toObject(includeInstance, f),
    autoscalingoptions: (f = msg.getAutoscalingoptions()) && proto.AutoScalingOptions.toObject(includeInstance, f),
    jobtimeoutoptions: (f = msg.getJobtimeoutoptions()) && proto.TimeoutOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.KintoConfiguration}
 */
proto.KintoConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.KintoConfiguration;
  return proto.KintoConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.KintoConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.KintoConfiguration}
 */
proto.KintoConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Language;
      reader.readMessage(value,proto.Language.deserializeBinaryFromReader);
      msg.addLanguages(value);
      break;
    case 2:
      var value = new proto.MemoryOptions;
      reader.readMessage(value,proto.MemoryOptions.deserializeBinaryFromReader);
      msg.setMemoryoptions(value);
      break;
    case 3:
      var value = new proto.CPUOptions;
      reader.readMessage(value,proto.CPUOptions.deserializeBinaryFromReader);
      msg.setCpuoptions(value);
      break;
    case 4:
      var value = new proto.TimeoutOptions;
      reader.readMessage(value,proto.TimeoutOptions.deserializeBinaryFromReader);
      msg.setTimeoutoptions(value);
      break;
    case 5:
      var value = new proto.AutoScalingOptions;
      reader.readMessage(value,proto.AutoScalingOptions.deserializeBinaryFromReader);
      msg.setAutoscalingoptions(value);
      break;
    case 6:
      var value = new proto.TimeoutOptions;
      reader.readMessage(value,proto.TimeoutOptions.deserializeBinaryFromReader);
      msg.setJobtimeoutoptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.KintoConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.KintoConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.KintoConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KintoConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Language.serializeBinaryToWriter
    );
  }
  f = message.getMemoryoptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MemoryOptions.serializeBinaryToWriter
    );
  }
  f = message.getCpuoptions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.CPUOptions.serializeBinaryToWriter
    );
  }
  f = message.getTimeoutoptions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.TimeoutOptions.serializeBinaryToWriter
    );
  }
  f = message.getAutoscalingoptions();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.AutoScalingOptions.serializeBinaryToWriter
    );
  }
  f = message.getJobtimeoutoptions();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.TimeoutOptions.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Language languages = 1;
 * @return {!Array<!proto.Language>}
 */
proto.KintoConfiguration.prototype.getLanguagesList = function() {
  return /** @type{!Array<!proto.Language>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Language, 1));
};


/** @param {!Array<!proto.Language>} value */
proto.KintoConfiguration.prototype.setLanguagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Language=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Language}
 */
proto.KintoConfiguration.prototype.addLanguages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Language, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.KintoConfiguration.prototype.clearLanguagesList = function() {
  this.setLanguagesList([]);
};


/**
 * optional MemoryOptions memoryOptions = 2;
 * @return {?proto.MemoryOptions}
 */
proto.KintoConfiguration.prototype.getMemoryoptions = function() {
  return /** @type{?proto.MemoryOptions} */ (
    jspb.Message.getWrapperField(this, proto.MemoryOptions, 2));
};


/** @param {?proto.MemoryOptions|undefined} value */
proto.KintoConfiguration.prototype.setMemoryoptions = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.KintoConfiguration.prototype.clearMemoryoptions = function() {
  this.setMemoryoptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.KintoConfiguration.prototype.hasMemoryoptions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CPUOptions cpuOptions = 3;
 * @return {?proto.CPUOptions}
 */
proto.KintoConfiguration.prototype.getCpuoptions = function() {
  return /** @type{?proto.CPUOptions} */ (
    jspb.Message.getWrapperField(this, proto.CPUOptions, 3));
};


/** @param {?proto.CPUOptions|undefined} value */
proto.KintoConfiguration.prototype.setCpuoptions = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.KintoConfiguration.prototype.clearCpuoptions = function() {
  this.setCpuoptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.KintoConfiguration.prototype.hasCpuoptions = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TimeoutOptions timeoutOptions = 4;
 * @return {?proto.TimeoutOptions}
 */
proto.KintoConfiguration.prototype.getTimeoutoptions = function() {
  return /** @type{?proto.TimeoutOptions} */ (
    jspb.Message.getWrapperField(this, proto.TimeoutOptions, 4));
};


/** @param {?proto.TimeoutOptions|undefined} value */
proto.KintoConfiguration.prototype.setTimeoutoptions = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.KintoConfiguration.prototype.clearTimeoutoptions = function() {
  this.setTimeoutoptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.KintoConfiguration.prototype.hasTimeoutoptions = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AutoScalingOptions autoScalingOptions = 5;
 * @return {?proto.AutoScalingOptions}
 */
proto.KintoConfiguration.prototype.getAutoscalingoptions = function() {
  return /** @type{?proto.AutoScalingOptions} */ (
    jspb.Message.getWrapperField(this, proto.AutoScalingOptions, 5));
};


/** @param {?proto.AutoScalingOptions|undefined} value */
proto.KintoConfiguration.prototype.setAutoscalingoptions = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.KintoConfiguration.prototype.clearAutoscalingoptions = function() {
  this.setAutoscalingoptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.KintoConfiguration.prototype.hasAutoscalingoptions = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TimeoutOptions jobTimeoutOptions = 6;
 * @return {?proto.TimeoutOptions}
 */
proto.KintoConfiguration.prototype.getJobtimeoutoptions = function() {
  return /** @type{?proto.TimeoutOptions} */ (
    jspb.Message.getWrapperField(this, proto.TimeoutOptions, 6));
};


/** @param {?proto.TimeoutOptions|undefined} value */
proto.KintoConfiguration.prototype.setJobtimeoutoptions = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.KintoConfiguration.prototype.clearJobtimeoutoptions = function() {
  this.setJobtimeoutoptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.KintoConfiguration.prototype.hasJobtimeoutoptions = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Logs.prototype.toObject = function(opt_includeInstance) {
  return proto.Logs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Logs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Logs.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Logs}
 */
proto.Logs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Logs;
  return proto.Logs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Logs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Logs}
 */
proto.Logs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Logs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Logs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Logs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Logs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Logs.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.Logs.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.Logs.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.Logs.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JobStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.JobStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JobStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JobStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    instancename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    starttimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endtimestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JobStatus}
 */
proto.JobStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JobStatus;
  return proto.JobStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JobStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JobStatus}
 */
proto.JobStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstancename(value);
      break;
    case 2:
      var value = /** @type {!proto.JobStatus.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStarttimestamp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndtimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JobStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JobStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JobStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JobStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstancename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getStarttimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEndtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.JobStatus.State = {
  NOT_SET: 0,
  PENDING: 1,
  RUNNING: 2,
  COMPLETED: 3,
  DELETED: 4,
  ERROR: 5,
  OOM_KILLED: 6
};

/**
 * optional string instanceName = 1;
 * @return {string}
 */
proto.JobStatus.prototype.getInstancename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.JobStatus.prototype.setInstancename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional State state = 2;
 * @return {!proto.JobStatus.State}
 */
proto.JobStatus.prototype.getState = function() {
  return /** @type {!proto.JobStatus.State} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.JobStatus.State} value */
proto.JobStatus.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 startTimestamp = 3;
 * @return {number}
 */
proto.JobStatus.prototype.getStarttimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.JobStatus.prototype.setStarttimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 endTimestamp = 4;
 * @return {number}
 */
proto.JobStatus.prototype.getEndtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.JobStatus.prototype.setEndtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TeleportServiceData.prototype.toObject = function(opt_includeInstance) {
  return proto.TeleportServiceData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TeleportServiceData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TeleportServiceData.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    credentials: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TeleportServiceData}
 */
proto.TeleportServiceData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TeleportServiceData;
  return proto.TeleportServiceData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TeleportServiceData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TeleportServiceData}
 */
proto.TeleportServiceData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCredentials(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TeleportServiceData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TeleportServiceData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TeleportServiceData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TeleportServiceData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCredentials();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.TeleportServiceData.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TeleportServiceData.prototype.setHost = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string credentials = 2;
 * @return {string}
 */
proto.TeleportServiceData.prototype.getCredentials = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TeleportServiceData.prototype.setCredentials = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReleaseConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ReleaseConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReleaseConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReleaseConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    buildconfig: (f = msg.getBuildconfig()) && proto.BuildConfig.toObject(includeInstance, f),
    runconfig: (f = msg.getRunconfig()) && proto.RunConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReleaseConfig}
 */
proto.ReleaseConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReleaseConfig;
  return proto.ReleaseConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReleaseConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReleaseConfig}
 */
proto.ReleaseConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.BuildConfig;
      reader.readMessage(value,proto.BuildConfig.deserializeBinaryFromReader);
      msg.setBuildconfig(value);
      break;
    case 2:
      var value = new proto.RunConfig;
      reader.readMessage(value,proto.RunConfig.deserializeBinaryFromReader);
      msg.setRunconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReleaseConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReleaseConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReleaseConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReleaseConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBuildconfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.BuildConfig.serializeBinaryToWriter
    );
  }
  f = message.getRunconfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.RunConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional BuildConfig buildConfig = 1;
 * @return {?proto.BuildConfig}
 */
proto.ReleaseConfig.prototype.getBuildconfig = function() {
  return /** @type{?proto.BuildConfig} */ (
    jspb.Message.getWrapperField(this, proto.BuildConfig, 1));
};


/** @param {?proto.BuildConfig|undefined} value */
proto.ReleaseConfig.prototype.setBuildconfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ReleaseConfig.prototype.clearBuildconfig = function() {
  this.setBuildconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReleaseConfig.prototype.hasBuildconfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RunConfig runConfig = 2;
 * @return {?proto.RunConfig}
 */
proto.ReleaseConfig.prototype.getRunconfig = function() {
  return /** @type{?proto.RunConfig} */ (
    jspb.Message.getWrapperField(this, proto.RunConfig, 2));
};


/** @param {?proto.RunConfig|undefined} value */
proto.ReleaseConfig.prototype.setRunconfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ReleaseConfig.prototype.clearRunconfig = function() {
  this.setRunconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReleaseConfig.prototype.hasRunconfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto);
