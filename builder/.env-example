######################################
#### COMMON ENVIRONMENT VARIABLES ####
######################################

LOG_LEVEL=DEBUG
SERVER_PORT=8080

IMAGE_REGISTRY_HOST=asia.gcr.io/kinto-development

##  Enables friendly / clean non debug related logs from the build service
USER_FRIENDLY_BUILD_LOGS_ENABLED=false

##  Kinto Core server hostname
##  By default, tls is disabled
KINTO_CORE_HOST_NAME=kinto-core:8080
KINTO_CORE_OVER_TLS=false

##  Proxless Fully Qualified Domain Name in Kubernetes
PROXLESS_FQDN=kinto-proxless.kintohub.svc.cluster.local

##  Workflow timeout
WORKFLOW_TIMEOUT=600

##  See KINTO_CORE_SECRET value on kinto core.
KINTO_CORE_SECRET=

####################################
#### ARGO ENVIRONMENT VARIABLES ####
####################################

##  Leave empty if `kinto-build` run in a pod
ARGO_KUBE_CONFIG_PATH=/Users/benjaminapprederisse/.kube/config

##  TTL in seconds for deleting the workflow from kubernetes after completion (success or failure)
ARGO_WORKFLOW_TTL_SECONDS=600

##  Kubernetes namespace where all the workflows are gonna run
ARGO_WORKFLOW_NAMESPACE=kintohub

##  Kubernetes secret used by kaniko to push the image into ${IMAGE_REGISTRY_HOST}
## Must be a docker secret - `kubernetes.io/dockerconfigjson`
##  Must be in ${ARGO_WORKFLOW_NAMESPACE} namespace
ARGO_WORKFLOW_DOCKER_SECRET=kinto-builder-workflow-docker

##  Kubernetes service account used by the workflow to interact with the kubernetes api
##  Must be in ARGO_WORKFLOW_NAMESPACE namespace
ARGO_WORKFLOW_SERVICE_ACCOUNT=kinto-builder-workflow

##  Hostname for minio which is used for logs storage. Mandatory when Argo Workflows are enabled
ARGO_WORKFLOW_MINIO_HOST=kinto-minio:9000

##  Access Key for accessing Minio. Mandatory when Argo Workflows are enabled
ARGO_WORKFLOW_MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE

##  Secret key for accessing minio. Mandatory when Argo Workflows are enabled
ARGO_WORKFLOW_MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

##  Bucket name in minio which the logs exists. Mandatory when Argo Workflows are enabled
ARGO_WORKFLOW_MINIO_BUCKET=argo-artifacts

##  Kubernetes Container Pull Policy that every argo step will follow.
ARGO_WORKFLOW_IMAGE_PULL_POLICY=IfNotPresent

ARGO_WORKFLOW_MAIN_IMAGE=kintohub/kinto-workflow-main:latest
ARGO_WORKFLOW_CLI_IMAGE=kintohub/kinto-workflow-cli:latest

##  Argo workflow use an `emptyDir` ephemeral storage. Be careful setting up this limit since it's gonna use the node volume.
ARGO_WORKFLOW_VOLUME_SIZE=1Gi

##  Resources for the main step
ARGO_WORKFLOW_MEMORY_LIMIT=2Gi # must be > 2Gi
ARGO_WORKFLOW_CPU_LIMIT=1 # must be > 500m
ARGO_WORKFLOW_MEMORY_REQUEST=
ARGO_WORKFLOW_CPU_REQUEST=

